// Script para testar cria√ß√£o de atividades no estado atual
// Execute este script no console do navegador na p√°gina /activities

console.log('üîç TESTANDO CRIA√á√ÉO DE ATIVIDADES - ESTADO ATUAL');
console.log('===============================================');

async function testCurrentActivityCreation() {
  try {
    // 1. Verificar se o Supabase est√° dispon√≠vel
    console.log('\n1. Verificando Supabase...');
    if (typeof window.supabase === 'undefined') {
      console.error('‚ùå Supabase n√£o est√° dispon√≠vel no window');
      return;
    }
    console.log('‚úÖ Supabase dispon√≠vel');

    // 2. Verificar autentica√ß√£o
    console.log('\n2. Verificando autentica√ß√£o...');
    const { data: { user }, error: userError } = await window.supabase.auth.getUser();
    
    if (userError) {
      console.error('‚ùå Erro de autentica√ß√£o:', userError);
      return;
    }
    
    if (!user) {
      console.error('‚ùå Usu√°rio n√£o autenticado');
      return;
    }
    
    console.log('‚úÖ Usu√°rio autenticado:', user.id, user.email);

    // 3. Verificar se a tabela activities existe e √© acess√≠vel
    console.log('\n3. Verificando tabela activities...');
    const { data: tableTest, error: tableError } = await window.supabase
      .from('activities')
      .select('id, title, created_by, company_id')
      .limit(5);
    
    if (tableError) {
      console.error('‚ùå Erro ao acessar tabela activities:', tableError);
      console.error('Detalhes:', {
        message: tableError.message,
        details: tableError.details,
        hint: tableError.hint,
        code: tableError.code
      });
      return;
    }
    
    console.log('‚úÖ Tabela activities acess√≠vel');
    console.log(`üìã ${tableTest.length} atividades encontradas:`, tableTest);

    // 4. Verificar perfil do usu√°rio
    console.log('\n4. Verificando perfil do usu√°rio...');
    let companyId = null;
    
    // Tentar buscar na tabela profiles
    const { data: profile, error: profileError } = await window.supabase
      .from('profiles')
      .select('*, company_id')
      .eq('id', user.id)
      .single();
    
    if (!profileError && profile) {
      companyId = profile.company_id;
      console.log('‚úÖ Perfil encontrado em profiles:', profile);
    } else {
      console.log('‚ö†Ô∏è Perfil n√£o encontrado em profiles, tentando user_profiles...');
      
      // Tentar buscar na tabela user_profiles
      const { data: userProfile, error: userProfileError } = await window.supabase
        .from('user_profiles')
        .select('*, company_id')
        .eq('id', user.id)
        .single();
      
      if (!userProfileError && userProfile) {
        companyId = userProfile.company_id;
        console.log('‚úÖ Perfil encontrado em user_profiles:', userProfile);
      } else {
        console.log('‚ö†Ô∏è Perfil n√£o encontrado, usando dados b√°sicos');
        console.log('‚ùå Erro profiles:', profileError);
        console.log('‚ùå Erro user_profiles:', userProfileError);
      }
    }

    // 5. Testar cria√ß√£o de atividade com dados m√≠nimos
    console.log('\n5. Testando cria√ß√£o de atividade...');
    const testActivityData = {
      title: 'Teste Atividade - ' + new Date().toLocaleTimeString(),
      description: 'Atividade de teste criada pelo script',
      type: 'task',
      priority: 'medium',
      status: 'pending',
      created_by: user.id,
      company_id: companyId
    };
    
    console.log('üìù Dados para teste:', testActivityData);
    
    const { data: newActivity, error: createError } = await window.supabase
      .from('activities')
      .insert([testActivityData])
      .select()
      .single();
    
    if (createError) {
      console.error('‚ùå Erro ao criar atividade:', createError);
      console.error('Detalhes completos:', {
        message: createError.message,
        details: createError.details,
        hint: createError.hint,
        code: createError.code,
        data: createError
      });
      
      // Verificar se √© erro de RLS
      if (createError.code === '42501') {
        console.error('üîí ERRO DE PERMISS√ÉO (RLS) - Verificar pol√≠ticas');
      }
      
      return;
    } else {
      console.log('‚úÖ Atividade criada com sucesso:', newActivity);
    }

    // 6. Verificar se a atividade aparece na lista
    console.log('\n6. Verificando se atividade aparece na lista...');
    const { data: updatedList, error: listError } = await window.supabase
      .from('activities')
      .select('*')
      .eq('created_by', user.id)
      .order('created_at', { ascending: false });
    
    if (listError) {
      console.error('‚ùå Erro ao buscar lista atualizada:', listError);
    } else {
      console.log(`‚úÖ Lista atualizada: ${updatedList.length} atividades`);
      console.log('üìã √öltima atividade criada:', updatedList[0]);
    }

    // 7. Verificar pol√≠ticas RLS
    console.log('\n7. Verificando pol√≠ticas RLS...');
    const { data: policies, error: policiesError } = await window.supabase
      .rpc('get_table_policies', { table_name: 'activities' })
      .catch(() => {
        console.log('‚ö†Ô∏è Fun√ß√£o get_table_policies n√£o dispon√≠vel');
        return { data: null, error: null };
      });
    
    if (policies && policies.length > 0) {
      console.log('‚úÖ Pol√≠ticas RLS encontradas:', policies);
    } else {
      console.log('‚ö†Ô∏è N√£o foi poss√≠vel verificar pol√≠ticas RLS');
    }

  } catch (error) {
    console.error('‚ùå Erro inesperado:', error);
    console.error('Stack trace:', error.stack);
  }
}

// Executar teste
testCurrentActivityCreation();
