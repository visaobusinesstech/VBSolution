#!/usr/bin/env python3
"""
Script para testar a sincroniza√ß√£o de fornecedores com Supabase
Execute: python test_suppliers_sync.py
"""

import os
import sys
import json
from datetime import datetime
from supabase import create_client, Client

def log(message, level="INFO"):
    """Fun√ß√£o para logging com timestamp"""
    timestamp = datetime.now().strftime("%H:%M:%S")
    print(f"[{timestamp}] {level}: {message}")

def test_suppliers_sync():
    """Testa a sincroniza√ß√£o de fornecedores"""
    
    # Configura√ß√£o do Supabase
    SUPABASE_URL = os.getenv('SUPABASE_URL', 'https://your-project.supabase.co')
    SUPABASE_KEY = os.getenv('SUPABASE_ANON_KEY', 'your-anon-key')
    
    if 'your-project' in SUPABASE_URL or 'your-anon-key' in SUPABASE_KEY:
        log("‚ùå Configure as vari√°veis de ambiente SUPABASE_URL e SUPABASE_ANON_KEY", "ERROR")
        log("   Exemplo: export SUPABASE_URL='https://your-project.supabase.co'", "INFO")
        log("   Exemplo: export SUPABASE_ANON_KEY='your-anon-key'", "INFO")
        return False
    
    try:
        # Inicializar cliente Supabase
        log("üîç Conectando ao Supabase...")
        supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
        
        # Teste 1: Verificar se a tabela suppliers existe
        log("üìã Verificando estrutura da tabela suppliers...")
        try:
            result = supabase.table('suppliers').select('*').limit(1).execute()
            log("‚úÖ Tabela suppliers encontrada", "SUCCESS")
        except Exception as e:
            log(f"‚ùå Erro ao acessar tabela suppliers: {e}", "ERROR")
            return False
        
        # Teste 2: Verificar pol√≠ticas RLS
        log("üîí Verificando pol√≠ticas RLS...")
        try:
            # Tentar buscar sem autentica√ß√£o (deve falhar se RLS estiver ativo)
            result = supabase.table('suppliers').select('*').execute()
            if result.data:
                log("‚ö†Ô∏è RLS pode n√£o estar ativo - dados retornados sem autentica√ß√£o", "WARNING")
            else:
                log("‚úÖ RLS parece estar ativo - nenhum dado retornado sem autentica√ß√£o", "SUCCESS")
        except Exception as e:
            log(f"‚úÖ RLS ativo - erro esperado: {e}", "SUCCESS")
        
        # Teste 3: Verificar dados existentes
        log("üìä Verificando dados existentes...")
        try:
            result = supabase.table('suppliers').select('*').execute()
            log(f"üìà {len(result.data)} fornecedores encontrados na tabela")
            
            if result.data:
                log("üìã Primeiros fornecedores:")
                for i, supplier in enumerate(result.data[:3]):
                    log(f"  {i+1}. {supplier.get('name', 'N/A')} - {supplier.get('city', 'N/A')}, {supplier.get('state', 'N/A')}")
        except Exception as e:
            log(f"‚ùå Erro ao buscar dados: {e}", "ERROR")
        
        # Teste 4: Verificar estrutura da tabela
        log("üèóÔ∏è Verificando estrutura da tabela...")
        try:
            # Tentar inserir um registro de teste (sem autentica√ß√£o, deve falhar)
            test_data = {
                'name': 'Teste Estrutura',
                'owner_id': '00000000-0000-0000-0000-000000000000'
            }
            
            result = supabase.table('suppliers').insert(test_data).execute()
            log("‚ö†Ô∏è Inser√ß√£o sem autentica√ß√£o funcionou - RLS pode n√£o estar ativo", "WARNING")
            
            # Limpar dados de teste
            supabase.table('suppliers').delete().eq('name', 'Teste Estrutura').execute()
            
        except Exception as e:
            log(f"‚úÖ Inser√ß√£o sem autentica√ß√£o falhou (esperado): {e}", "SUCCESS")
        
        log("üéâ Testes de estrutura conclu√≠dos com sucesso!", "SUCCESS")
        return True
        
    except Exception as e:
        log(f"‚ùå Erro geral: {e}", "ERROR")
        return False

def test_with_auth():
    """Testa com autentica√ß√£o (requer credenciais de service role)"""
    
    SUPABASE_URL = os.getenv('SUPABASE_URL', 'https://your-project.supabase.co')
    SUPABASE_SERVICE_KEY = os.getenv('SUPABASE_SERVICE_KEY', 'your-service-key')
    
    if 'your-project' in SUPABASE_URL or 'your-service-key' in SUPABASE_SERVICE_KEY:
        log("‚ö†Ô∏è Para testes com autentica√ß√£o, configure SUPABASE_SERVICE_KEY", "WARNING")
        return False
    
    try:
        log("üîê Testando com autentica√ß√£o de service role...")
        supabase: Client = create_client(SUPABASE_URL, SUPABASE_SERVICE_KEY)
        
        # Criar fornecedor de teste
        test_supplier = {
            'name': f'Fornecedor Teste {datetime.now().strftime("%Y%m%d_%H%M%S")}',
            'fantasy_name': 'Empresa Teste LTDA',
            'cnpj': '12.345.678/0001-90',
            'phone': '(11) 99999-9999',
            'city': 'S√£o Paulo',
            'state': 'SP',
            'notes': 'Fornecedor criado via teste automatizado',
            'owner_id': '00000000-0000-0000-0000-000000000000'  # ID de teste
        }
        
        log(f"üìù Criando fornecedor: {test_supplier['name']}")
        result = supabase.table('suppliers').insert(test_supplier).execute()
        
        if result.data:
            supplier_id = result.data[0]['id']
            log(f"‚úÖ Fornecedor criado com sucesso! ID: {supplier_id}", "SUCCESS")
            
            # Buscar o fornecedor criado
            log("üîç Buscando fornecedor criado...")
            result = supabase.table('suppliers').select('*').eq('id', supplier_id).execute()
            
            if result.data:
                log("‚úÖ Fornecedor encontrado na busca", "SUCCESS")
                log(f"üìã Dados: {json.dumps(result.data[0], indent=2, default=str)}")
            
            # Limpar dados de teste
            log("üßπ Limpando dados de teste...")
            supabase.table('suppliers').delete().eq('id', supplier_id).execute()
            log("‚úÖ Dados de teste removidos", "SUCCESS")
            
        return True
        
    except Exception as e:
        log(f"‚ùå Erro no teste com autentica√ß√£o: {e}", "ERROR")
        return False

def main():
    """Fun√ß√£o principal"""
    log("üöÄ Iniciando testes de sincroniza√ß√£o de fornecedores...")
    log("=" * 60)
    
    # Teste b√°sico de estrutura
    success = test_suppliers_sync()
    
    log("=" * 60)
    
    # Teste com autentica√ß√£o (opcional)
    test_with_auth()
    
    log("=" * 60)
    log("üèÅ Testes conclu√≠dos!")
    
    if success:
        log("‚úÖ Sistema de fornecedores est√° funcionando corretamente", "SUCCESS")
        sys.exit(0)
    else:
        log("‚ùå Problemas encontrados no sistema de fornecedores", "ERROR")
        sys.exit(1)

if __name__ == "__main__":
    main()
