#!/usr/bin/env python3
"""
Script para testar especificamente a p√°gina de atividades e identificar problemas
VBSolution - Sistema CRM Completo
"""

import requests
import json
from datetime import datetime

# Configura√ß√µes do Supabase
SUPABASE_URL = "https://nrbsocawokmihvxfcpso.supabase.co"
SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5yYnNvY2F3b2ttaWh2eGZjcHNvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTY0NzQwNTMsImV4cCI6MjA3MjA1MDA1M30.3SxEVRNNBHhAXgJ7S2BMHm1QWq9kxYamuLjvZm0_OU0"

# Headers para as requisi√ß√µes
headers = {
    'apikey': SUPABASE_ANON_KEY,
    'Authorization': f'Bearer {SUPABASE_ANON_KEY}',
    'Content-Type': 'application/json',
    'Prefer': 'return=minimal'
}

def log(message, level="INFO"):
    """Fun√ß√£o para logging com timestamp"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"[{timestamp}] {level}: {message}")

def test_activities_table():
    """Testar especificamente a tabela activities"""
    try:
        log("üîç Testando tabela activities...")
        
        # Testar acesso b√°sico
        response = requests.get(f"{SUPABASE_URL}/rest/v1/activities?select=*&limit=1", headers=headers)
        
        if response.status_code == 200:
            data = response.json()
            log(f"‚úÖ Tabela activities acess√≠vel - {len(data)} registros")
            
            if data:
                # Verificar estrutura dos dados
                first_activity = data[0]
                log(f"üìä Estrutura da primeira atividade:")
                for key, value in first_activity.items():
                    log(f"   {key}: {type(value).__name__} = {value}")
            else:
                log("üìä Tabela activities est√° vazia (sem dados mockados)")
            
            return True, data
        else:
            log(f"‚ùå Erro ao acessar activities: {response.status_code} - {response.text}", "ERROR")
            return False, []
            
    except Exception as e:
        log(f"‚ùå Erro ao testar activities: {str(e)}", "ERROR")
        return False, []

def test_activities_with_filters():
    """Testar filtros na tabela activities"""
    try:
        log("üîç Testando filtros na tabela activities...")
        
        # Testar diferentes filtros
        filters = [
            "?select=*&limit=5",
            "?select=id,title,status&limit=3",
            "?select=*&status=eq.pending&limit=2",
            "?select=*&priority=eq.high&limit=2"
        ]
        
        for filter_query in filters:
            try:
                response = requests.get(f"{SUPABASE_URL}/rest/v1/activities{filter_query}", headers=headers)
                
                if response.status_code == 200:
                    data = response.json()
                    log(f"‚úÖ Filtro {filter_query}: {len(data)} registros retornados")
                else:
                    log(f"‚ö†Ô∏è Filtro {filter_query}: Status {response.status_code}")
                    
            except Exception as e:
                log(f"‚ùå Erro no filtro {filter_query}: {str(e)}", "ERROR")
        
        return True
        
    except Exception as e:
        log(f"‚ùå Erro ao testar filtros: {str(e)}", "ERROR")
        return False

def test_activities_insert():
    """Testar inser√ß√£o na tabela activities (simula√ß√£o)"""
    try:
        log("üîç Testando inser√ß√£o na tabela activities...")
        
        # Dados de teste (sem owner_id v√°lido para teste de estrutura)
        test_activity = {
            "title": "Teste de Atividade",
            "description": "Teste para verificar estrutura da tabela",
            "status": "pending",
            "priority": "medium",
            "due_date": "2025-12-31T23:59:59Z"
        }
        
        # Tentar inserir (deve falhar por falta de owner_id, mas testa estrutura)
        response = requests.post(f"{SUPABASE_URL}/rest/v1/activities", 
                               headers=headers, 
                               json=test_activity)
        
        if response.status_code in [400, 422]:  # Erro esperado por owner_id obrigat√≥rio
            log("‚úÖ Estrutura da tabela activities est√° correta (erro esperado por owner_id)")
            return True
        else:
            log(f"‚ö†Ô∏è Status inesperado na inser√ß√£o: {response.status_code}", "WARNING")
            return False
            
    except Exception as e:
        log(f"‚ùå Erro ao testar inser√ß√£o: {str(e)}", "ERROR")
        return False

def test_activities_permissions():
    """Testar permiss√µes da tabela activities"""
    try:
        log("üîç Testando permiss√µes da tabela activities...")
        
        # Testar acesso sem autentica√ß√£o (deve falhar com RLS ativo)
        response = requests.get(f"{SUPABASE_URL}/rest/v1/activities", headers=headers)
        
        if response.status_code in [401, 403]:
            log("‚úÖ Pol√≠ticas RLS est√£o ativas (acesso negado sem autentica√ß√£o)")
            return True
        elif response.status_code == 200:
            log("‚ö†Ô∏è Pol√≠ticas RLS podem n√£o estar ativas (dados acess√≠veis sem autentica√ß√£o)", "WARNING")
            return False
        else:
            log(f"‚ö†Ô∏è Status inesperado ao testar permiss√µes: {response.status_code}", "WARNING")
            return False
            
    except Exception as e:
        log(f"‚ùå Erro ao testar permiss√µes: {str(e)}", "ERROR")
        return False

def check_activities_structure():
    """Verificar estrutura completa da tabela activities"""
    try:
        log("üîç Verificando estrutura da tabela activities...")
        
        # Verificar se a tabela tem as colunas esperadas
        response = requests.get(f"{SUPABASE_URL}/rest/v1/activities?select=*&limit=1", headers=headers)
        
        if response.status_code == 200:
            data = response.json()
            
            if data:
                first_activity = data[0]
                expected_columns = [
                    'id', 'owner_id', 'title', 'description', 'status', 
                    'priority', 'due_date', 'assigned_to', 'project_id',
                    'created_at', 'updated_at'
                ]
                
                missing_columns = []
                for col in expected_columns:
                    if col not in first_activity:
                        missing_columns.append(col)
                
                if missing_columns:
                    log(f"‚ö†Ô∏è Colunas faltando na tabela activities: {', '.join(missing_columns)}", "WARNING")
                else:
                    log("‚úÖ Todas as colunas esperadas est√£o presentes na tabela activities")
                
                return True
            else:
                log("üìä Tabela activities est√° vazia - n√£o √© poss√≠vel verificar estrutura")
                return True
        else:
            log(f"‚ùå N√£o foi poss√≠vel verificar estrutura: {response.status_code}")
            return False
            
    except Exception as e:
        log(f"‚ùå Erro ao verificar estrutura: {str(e)}", "ERROR")
        return False

def main():
    """Fun√ß√£o principal"""
    log("üß™ TESTE ESPEC√çFICO DA P√ÅGINA DE ATIVIDADES")
    log("=" * 60)
    
    # Testar tabela activities
    activities_ok, activities_data = test_activities_table()
    
    # Testar filtros
    filters_ok = test_activities_with_filters()
    
    # Testar inser√ß√£o
    insert_ok = test_activities_insert()
    
    # Testar permiss√µes
    permissions_ok = test_activities_permissions()
    
    # Verificar estrutura
    structure_ok = check_activities_structure()
    
    # Resumo dos testes
    log("=" * 60)
    log("üìä RESUMO DOS TESTES DE ATIVIDADES:")
    log(f"   üìã Tabela acess√≠vel: {'‚úÖ OK' if activities_ok else '‚ùå FALHOU'}")
    log(f"   üîç Filtros funcionando: {'‚úÖ OK' if filters_ok else '‚ö†Ô∏è ATEN√á√ÉO'}")
    log(f"   üìù Estrutura de inser√ß√£o: {'‚úÖ OK' if insert_ok else '‚ö†Ô∏è ATEN√á√ÉO'}")
    log(f"   üîí Permiss√µes RLS: {'‚úÖ OK' if permissions_ok else '‚ö†Ô∏è ATEN√á√ÉO'}")
    log(f"   üèóÔ∏è Estrutura da tabela: {'‚úÖ OK' if structure_ok else '‚ö†Ô∏è ATEN√á√ÉO'}")
    
    if activities_ok and structure_ok:
        log("üéâ TABELA ACTIVITIES FUNCIONANDO PERFEITAMENTE!")
        log("=" * 60)
        log("üîß PROBLEMA IDENTIFICADO:")
        log("O loading eterno pode ser causado por:")
        log("1. Dados mockados corrompidos")
        log("2. Problemas de RLS")
        log("3. Falta de dados para o usu√°rio logado")
        log("=" * 60)
        log("üí° SOLU√á√ÉO:")
        log("Execute o script clean_and_sync_system.sql no Supabase")
        log("Isso vai limpar dados mockados e sincronizar tudo")
        log("=" * 60)
        return True
    else:
        log("‚ö†Ô∏è PROBLEMAS NA TABELA ACTIVITIES")
        log("=" * 60)
        log("üîß SOLU√á√ïES:")
        log("1. Execute clean_and_sync_system.sql no Supabase")
        log("2. Verifique se a tabela foi criada corretamente")
        log("3. Verifique as pol√≠ticas RLS")
        log("=" * 60)
        return False

if __name__ == "__main__":
    try:
        success = main()
        exit(0 if success else 1)
    except KeyboardInterrupt:
        log("\n‚ö†Ô∏è Testes interrompidos pelo usu√°rio", "WARNING")
        exit(1)
    except Exception as e:
        log(f"\n‚ùå Erro inesperado: {str(e)}", "ERROR")
        exit(1)
