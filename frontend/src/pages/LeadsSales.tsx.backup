
import { useState, useEffect, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import { DragDropContext, Droppable, Draggable, DropResult } from '@hello-pangea/dnd';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { 
  Plus, Filter, Search, MoreVertical, Settings, BarChart3, Zap, Kanban, List, Clock, Calendar, X,
  DollarSign, User, Building2, Target, TrendingUp, Phone, Mail, MessageSquare, FileText, Activity,
  Download, Upload, Edit, Trash2, Eye, Share, ChevronDown, ArrowUpDown, AlignJustify
} from 'lucide-react';
import { useTheme } from '@/contexts/ThemeContext';
import { useVB } from '@/contexts/VBContext';
import { supabase } from '@/integrations/supabase/client';
import { toast } from '@/hooks/use-toast';
import { CreateDealModal } from '@/components/CreateDealModal';
import { CreatePipelineModal } from '@/components/CreatePipelineModal';
import PipelineSelector from '@/components/leads/PipelineSelector';
import MinimalistLeadCard from '@/components/leads/MinimalistLeadCard';
import LeadExpandedModal from '@/components/leads/LeadExpandedModal';
import StandardLeadsFilters from '@/components/leads/StandardLeadsFilters';
import { useLeads } from '@/hooks/useLeads';
import { useFunnelStages } from '@/hooks/useFunnelStages';
import { useProducts } from '@/hooks/useProducts';

const LeadsSales = () => {
  const navigate = useNavigate();
  const { topBarColor } = useTheme();
  const { state } = useVB();
  const { companies, employees } = state;
  
  // Estados principais
  const [showCreateDeal, setShowCreateDeal] = useState(false);
  const [showCreatePipeline, setShowCreatePipeline] = useState(false);
  const [expandedLead, setExpandedLead] = useState<string | null>(null);
  const [activeTab, setActiveTab] = useState('pipeline');
  const [isAutomationModalOpen, setIsAutomationModalOpen] = useState(false);
  
  // Filtros
  const [searchQuery, setSearchQuery] = useState('');
  const [statusFilter, setStatusFilter] = useState('all');
  const [priorityFilter, setPriorityFilter] = useState('all');
  const [stageFilter, setStageFilter] = useState('all');
  const [companyFilter, setCompanyFilter] = useState('all');
  const [responsibleFilter, setResponsibleFilter] = useState('all');
  const searchInputRef = useRef<HTMLInputElement>(null);

  // Estados para dados do Supabase
  const [leads, setLeads] = useState<any[]>([]);
  const [stages, setStages] = useState<any[]>([]);
  const [products, setProducts] = useState<any[]>([]);
  const [templates, setTemplates] = useState<any[]>([]);
  const [events, setEvents] = useState<any[]>([]);
  const [pipelines, setPipelines] = useState([]);
  const [funnelStages, setFunnelStages] = useState([]);

  // Estados de loading e erro
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [showCreateTemplate, setShowCreateTemplate] = useState(false);
  const [showCreateEvent, setShowCreateEvent] = useState(false);
  
  // Estados para visualiza√ß√£o
  const [viewMode, setViewMode] = useState<'kanban' | 'list'>('kanban');
  const [selectedPipeline, setSelectedPipeline] = useState<string>('default');

  // Carregar dados do Supabase
  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    console.log('üîÑ Iniciando carregamento de dados...');
    setLoading(true);
    setError(null);
    try {
      // Carregar dados b√°sicos primeiro
      console.log('üìä Carregando pipelines...');
      await loadPipelines();
      
      console.log('üìä Carregando stages...');
      await loadStages();
      
      console.log('üìä Carregando produtos...');
      await loadProducts();
      
      console.log('üìä Carregando templates...');
      await loadTemplates();
      
      console.log('üìä Carregando eventos...');
      await loadEvents();
      
      console.log('üìä Carregando leads...');
      await loadLeads();
      
      console.log('‚úÖ Todos os dados carregados com sucesso!');
    } catch (error) {
      console.error('‚ùå Erro ao carregar dados:', error);
      setError(`Erro ao carregar dados do servidor: ${error.message}`);
    } finally {
      setLoading(false);
    }
  };

  const loadLeads = async () => {
    try {
      console.log('üîç Tentando carregar leads do Supabase...');
      const { data, error } = await supabase
        .from('leads')
        .select(`
          *,
          companies(name),
          user_profiles(name)
        `)
        .order('created_at', { ascending: false });

      if (error) {
        console.error('‚ùå Erro espec√≠fico do Supabase:', error);
        // Se houver erro de rela√ß√£o, tentar sem joins
        console.log('üîÑ Tentando carregar leads sem joins...');
        const { data: simpleData, error: simpleError } = await supabase
          .from('leads')
          .select('*')
          .order('created_at', { ascending: false });
        
        if (simpleError) {
          throw new Error(`Erro ao carregar leads: ${simpleError.message}`);
        }
        
        console.log('‚úÖ Leads carregados (simples):', simpleData?.length || 0, 'registros');
        setLeads(simpleData || []);
        return;
      }
      
      console.log('‚úÖ Leads carregados:', data?.length || 0, 'registros');
      setLeads(data || []);
    } catch (error) {
      console.error('‚ùå Erro ao carregar leads:', error);
      // Se n√£o conseguir carregar leads, pelo menos definir array vazio
      setLeads([]);
      throw error;
    }
  };

  const loadStages = async () => {
    try {
      console.log('üîç Tentando carregar stages do Supabase...');
      const { data, error } = await supabase
        .from('funnel_stages')
        .select('*')
        .order('order_position', { ascending: true });

      if (error) {
        console.error('‚ùå Erro espec√≠fico do Supabase:', error);
        throw new Error(`Erro ao carregar stages: ${error.message}`);
      }
      
      const stagesData = data || [];
      console.log('‚úÖ Stages carregados:', stagesData.length, 'registros');
      setStages(stagesData);
      
      // Organizar stages para o pipeline
      const organizedStages = stagesData.map(stage => ({
        id: stage.id,
        title: stage.name,
        color: stage.color,
        value: '0‚Ç¨',
        count: 0,
        deals: []
      }));
      setFunnelStages(organizedStages);
    } catch (error) {
      console.error('‚ùå Erro ao carregar stages:', error);
      // Se n√£o conseguir carregar stages, usar stages padr√£o
      console.log('üîÑ Usando stages padr√£o...');
      const defaultStages = [
        { id: '1', name: 'Qualified', order_position: 1, color: '#10b981', probability: 10 },
        { id: '2', name: 'Contact Made', order_position: 2, color: '#3b82f6', probability: 25 },
        { id: '3', name: 'Demo Scheduled', order_position: 3, color: '#8b5cf6', probability: 50 },
        { id: '4', name: 'Proposal Made', order_position: 4, color: '#f59e0b', probability: 75 },
        { id: '5', name: 'Negotiations Started', order_position: 5, color: '#ef4444', probability: 90 }
      ];
      setStages(defaultStages);
      setFunnelStages(defaultStages.map(stage => ({
        id: stage.id,
        title: stage.name,
        color: stage.color,
        value: '0‚Ç¨',
        count: 0,
        deals: []
      })));
      throw error;
    }
  };

  const loadProducts = async () => {
    try {
      console.log('üîç Tentando carregar produtos do Supabase...');
      const { data, error } = await supabase
        .from('products')
        .select('*')
        .order('name', { ascending: true });

      if (error) {
        console.error('‚ùå Erro ao carregar produtos:', error);
        setProducts([]);
        return;
      }
      console.log('‚úÖ Produtos carregados:', data?.length || 0, 'registros');
      setProducts(data || []);
    } catch (error) {
      console.error('‚ùå Erro ao carregar produtos:', error);
      setProducts([]);
    }
  };

  const loadTemplates = async () => {
    try {
      console.log('üîç Tentando carregar templates do Supabase...');
      const { data, error } = await supabase
        .from('templates')
        .select('*')
        .order('created_at', { ascending: false });

      if (error) {
        console.error('‚ùå Erro ao carregar templates:', error);
        setTemplates([]);
        return;
      }
      console.log('‚úÖ Templates carregados:', data?.length || 0, 'registros');
      setTemplates(data || []);
    } catch (error) {
      console.error('‚ùå Erro ao carregar templates:', error);
      setTemplates([]);
    }
  };

  const loadEvents = async () => {
    try {
      console.log('üîç Tentando carregar eventos do Supabase...');
      const { data, error } = await supabase
        .from('lead_events')
        .select('*')
        .order('start_date', { ascending: true });

      if (error) {
        console.error('‚ùå Erro ao carregar eventos:', error);
        setEvents([]);
        return;
      }
      console.log('‚úÖ Eventos carregados:', data?.length || 0, 'registros');
      setEvents(data || []);
    } catch (error) {
      console.error('‚ùå Erro ao carregar eventos:', error);
      setEvents([]);
    }
  };

  const loadPipelines = async () => {
    try {
      // Por enquanto, vamos criar pipelines padr√£o
      // Em uma implementa√ß√£o real, isso viria do Supabase
      const defaultPipelines = [
        {
          id: 'default',
          name: 'Pipeline Principal',
          description: 'Pipeline padr√£o de vendas',
          is_default: true,
          created_at: new Date().toISOString()
        },
        {
          id: 'enterprise',
          name: 'Pipeline Enterprise',
          description: 'Pipeline para clientes enterprise',
          is_default: false,
          created_at: new Date().toISOString()
        },
        {
          id: 'startup',
          name: 'Pipeline Startup',
          description: 'Pipeline para startups',
          is_default: false,
          created_at: new Date().toISOString()
        }
      ];
      setPipelines(defaultPipelines);
    } catch (error) {
      console.error('Erro ao carregar pipelines:', error);
      throw error;
    }
  };

  // Filtrar leads
  const filteredLeads = leads.filter(lead => {
    const matchesSearch = !searchQuery || 
      lead.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      (lead.company || '').toLowerCase().includes(searchQuery.toLowerCase());
    
    const matchesStatus = statusFilter === 'all' || lead.status === statusFilter;
    const matchesPriority = priorityFilter === 'all' || lead.priority === priorityFilter;
    const matchesStage = stageFilter === 'all' || lead.stage_id === stageFilter;

    return matchesSearch && matchesStatus && matchesPriority && matchesStage;
  });

  // Fun√ß√£o para focar no campo de busca
  const handleSearchIconClick = () => {
    if (searchInputRef.current) {
      searchInputRef.current.focus();
    }
  };

  const handleLeadClick = (leadId: string) => {
    setExpandedLead(leadId);
  };

  const handleClearFilters = () => {
    setSearchQuery('');
    setStatusFilter('all');
    setPriorityFilter('all');
    setStageFilter('all');
  };

  // Fun√ß√£o para mudar aba ativa
  const handleTabChange = (tab: string) => {
    setActiveTab(tab);
  };

  // Organizar leads por est√°gio
  useEffect(() => {
    if (leads.length > 0 && stages.length > 0) {
      const organizedStages = stages.map(stage => {
        const stageLeads = leads.filter(lead => lead.stage_id === stage.id);
        const totalValue = stageLeads.reduce((sum, lead) => sum + (lead.value || 0), 0);
        
        return {
          id: stage.id,
          title: stage.name,
          color: stage.color,
          value: `${totalValue.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`,
          count: stageLeads.length,
          deals: stageLeads.map(lead => ({
            id: lead.id,
            title: `${lead.name} deal`,
            company: (lead.companies as any)?.name || lead.company || 'N/A',
            value: `${(lead.value || 0).toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`,
            contact: (lead.user_profiles as any)?.name || 'N/A',
            status: lead.status === 'won' ? 'won' : lead.status === 'lost' ? 'lost' : 'active',
            lead: lead
          }))
        };
      });
      setFunnelStages(organizedStages);
    }
  }, [leads, stages]);

  // Fun√ß√£o para drag & drop no pipeline
  const handleDragEnd = async (result: any) => {
    const { destination, source, draggableId } = result;

    if (!destination) {
      console.log('‚ùå Drag cancelado: sem destino');
      return;
    }
    
    if (destination.droppableId === source.droppableId) {
      console.log('‚ùå Drag cancelado: mesmo est√°gio');
      return;
    }

    try {
      console.log('üîÑ Movendo lead:', {
        leadId: draggableId,
        from: source.droppableId,
        to: destination.droppableId
      });

      // Encontrar o lead movido
      const leadId = draggableId;
      const newStageId = destination.droppableId;

      // Atualizar no Supabase
      const { error } = await supabase
        .from('leads')
        .update({ 
          stage_id: newStageId,
          updated_at: new Date().toISOString()
        } as any)
        .eq('id', leadId);

      if (error) {
        console.error('‚ùå Erro do Supabase:', error);
        throw new Error(`Erro ao atualizar lead: ${error.message}`);
      }

      console.log('‚úÖ Lead atualizado no Supabase');

      // Atualizar estado local imediatamente
      setLeads(prevLeads => 
        prevLeads.map(lead => 
          lead.id === leadId 
            ? { ...lead, stage_id: newStageId, updated_at: new Date().toISOString() }
            : lead
        )
      );

      // Recarregar dados para garantir sincroniza√ß√£o
      await loadLeads();

      toast({
        title: "Lead atualizado",
        description: "Lead movido com sucesso!",
      });

    } catch (error) {
      console.error('‚ùå Erro ao mover lead:', error);
      toast({
        title: "Erro",
        description: `Erro ao mover lead: ${error.message}`,
        variant: "destructive"
      });
    }
  };

  // Fun√ß√£o para criar novo lead
  const handleCreateLead = async (leadData: any) => {
    try {
      console.log('üîÑ Criando lead:', leadData);
      
      // Preparar dados para inser√ß√£o
      const leadToInsert = {
        name: leadData.name,
        email: leadData.email || '',
        phone: leadData.phone || '',
        company: leadData.company || '',
        value: leadData.value || 0,
        stage_id: leadData.stage_id || stages[0]?.id,
        company_id: leadData.company_id || null,
        priority: leadData.priority || 'medium',
        status: 'open',
        source: leadData.source || 'manual',
        notes: leadData.notes || '',
        expected_close_date: leadData.expected_close_date || null,
        tags: leadData.tags || [],
        owner_id: 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', // ID tempor√°rio para teste
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };

      console.log('üìù Dados preparados para inser√ß√£o:', leadToInsert);
      
      const { data, error } = await supabase
        .from('leads')
        .insert([leadToInsert] as any)
        .select()
        .single();

      if (error) {
        console.error('‚ùå Erro ao criar lead:', error);
        throw new Error(`Erro ao criar lead: ${error.message}`);
      }

      console.log('‚úÖ Lead criado com sucesso:', data);

      // Atualizar estado local imediatamente
      setLeads(prevLeads => [data, ...prevLeads]);
      
      // Recarregar dados para garantir sincroniza√ß√£o
      await loadLeads();
      
      setShowCreateDeal(false);
      toast({
        title: "Lead criado",
        description: "Lead criado com sucesso!",
      });

    } catch (error) {
      console.error('‚ùå Erro ao criar lead:', error);
      toast({
        title: "Erro",
        description: `Erro ao criar lead: ${error.message}`,
        variant: "destructive"
      });
    }
  };

  // Fun√ß√£o para criar novo template
  const handleCreateTemplate = async (templateData: any) => {
    try {
      const { data, error } = await supabase
        .from('templates')
        .insert([{
          name: templateData.name,
          type: templateData.type,
          content: templateData.content,
          subject: templateData.subject,
          variables: templateData.variables || {}
        }] as any)
        .select()
        .single();

      if (error) throw error;

      // Recarregar dados
      await loadTemplates();
      
      setShowCreateTemplate(false);
      toast({
        title: "Template criado",
        description: "Template criado com sucesso!",
      });

    } catch (error) {
      console.error('Erro ao criar template:', error);
      toast({
        title: "Erro",
        description: "Erro ao criar template. Tente novamente.",
        variant: "destructive"
      });
    }
  };

  // Fun√ß√µes de formata√ß√£o
  const formatCurrency = (value: number) => {
    return new Intl.NumberFormat('pt-BR', {
      style: 'currency',
      currency: 'BRL'
    }).format(value);
  };

  const formatDate = (date: string) => {
    return new Date(date).toLocaleDateString('pt-BR');
  };

  const getCompanyName = (companyId: string) => {
    const company = companies?.find(c => c.id === companyId);
    return (company as any)?.name || 'Empresa n√£o encontrada';
  };

  const getEmployeeName = (employeeId: string) => {
    const employee = employees?.find(e => e.id === employeeId);
    return employee?.name || 'Respons√°vel n√£o definido';
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'urgent': return 'bg-red-100 text-red-800';
      case 'high': return 'bg-orange-100 text-orange-800';
      case 'medium': return 'bg-yellow-100 text-yellow-800';
      case 'low': return 'bg-green-100 text-green-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getPriorityLabel = (priority: string) => {
    switch (priority) {
      case 'urgent': return 'Urgente';
      case 'high': return 'Alta';
      case 'medium': return 'M√©dia';
      case 'low': return 'Baixa';
      default: return 'M√©dia';
    }
  };

  const selectedLeadData = expandedLead ? leads.find(lead => lead.id === expandedLead) : null;

  if (loading) {
    return (
      <div className="flex items-center justify-center h-screen">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Carregando dados...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex items-center justify-center h-screen">
        <div className="text-center text-red-600">
          <p>Erro ao carregar dados: {error}</p>
          <Button 
            onClick={() => loadData()}
            className="mt-4"
          >
            Tentar Novamente
          </Button>
        </div>
      </div>
    );
  }

  // Configura√ß√£o das abas
  const tabs = [
    { 
      id: 'pipeline', 
      label: 'Pipeline',
      icon: Kanban,
      description: 'Visualiza√ß√£o em Kanban do pipeline de vendas'
    },
    {
      id: 'lista', 
      label: 'Lista',
      icon: List,
      description: 'Lista detalhada de todos os leads'
    },
    {
      id: 'calendario', 
      label: 'Calend√°rio',
      icon: Calendar,
      description: 'Compromissos e reuni√µes'
    },
    {
      id: 'template',
      label: 'Template',
      icon: FileText,
      description: 'Templates de comunica√ß√£o'
    },
    {
      id: 'dashboard', 
      label: 'Dashboard',
      icon: BarChart3,
      description: 'M√©tricas e relat√≥rios'
    }
  ];

  // Verifica√ß√£o de erro para evitar tela branca
  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="bg-red-50 border border-red-200 rounded-lg p-6 max-w-md">
            <h2 className="text-lg font-semibold text-red-800 mb-2">Erro ao Carregar</h2>
            <p className="text-red-600 mb-4">{error}</p>
            <Button 
              onClick={() => window.location.reload()}
              variant="outline"
              className="border-red-300 text-red-700 hover:bg-red-50"
            >
              Tentar Novamente
            </Button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="h-screen bg-white flex flex-col">
        {/* Header estilo Pipedrive - FIXO NO TOPO */}
        <div className="flex-shrink-0 z-40 bg-white border-b border-gray-200">
          <div className="px-6 py-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-4">
                <h1 className="text-xl font-semibold text-gray-900">Pipeline de Vendas</h1>
                
                {/* Seletor de Pipeline */}
                <div className="flex items-center space-x-2">
                  <select
                    value={selectedPipeline}
                    onChange={(e) => setSelectedPipeline(e.target.value)}
                    className="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm"
                  >
                    {pipelines.map((pipeline: any) => (
                      <option key={pipeline.id} value={pipeline.id}>
                        {pipeline.name}
                      </option>
                    ))}
                  </select>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => setShowCreatePipeline(true)}
                    className="text-gray-600"
                  >
                    <Plus className="h-4 w-4 mr-1" />
                    Novo Pipeline
                  </Button>
                </div>

                <div className="flex items-center space-x-2">
                  <Button variant="outline" size="sm" className="text-gray-600">
                    <Filter className="h-4 w-4 mr-2" />
                    Filtros
                  </Button>
                  <Button variant="outline" size="sm" className="text-gray-600">
                    <Settings className="h-4 w-4 mr-2" />
                    Configura√ß√µes
                  </Button>
                </div>
              </div>

              <div className="flex items-center space-x-3">
                {/* Bot√µes de Visualiza√ß√£o */}
                <div className="flex items-center bg-gray-100 rounded-lg p-1">
                  <Button
                    variant={viewMode === 'kanban' ? 'default' : 'ghost'}
                    size="sm"
                    onClick={() => setViewMode('kanban')}
                    className={`px-3 py-1 text-sm ${
                      viewMode === 'kanban' 
                        ? 'bg-white shadow-sm text-gray-900' 
                        : 'text-gray-600 hover:text-gray-900'
                    }`}
                  >
                    <Kanban className="h-4 w-4 mr-1" />
                    Quadros
                  </Button>
                  <Button
                    variant={viewMode === 'list' ? 'default' : 'ghost'}
                    size="sm"
                    onClick={() => setViewMode('list')}
                    className={`px-3 py-1 text-sm ${
                      viewMode === 'list' 
                        ? 'bg-white shadow-sm text-gray-900' 
                        : 'text-gray-600 hover:text-gray-900'
                    }`}
                  >
                    <List className="h-4 w-4 mr-1" />
                    Lista
                  </Button>
                </div>

                {/* Barra de pesquisa */}
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
                  <input
                    type="text"
                    placeholder="Pesquisar leads e vendas..."
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    className="pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent w-80"
                  />
                </div>

                {/* Bot√£o criar lead */}
                <Button
                  onClick={() => setShowCreateDeal(true)}
                  className="bg-blue-600 hover:bg-blue-700 text-white"
                >
                  <Plus className="h-4 w-4 mr-2" />
                  Adicionar Lead
                </Button>
              </div>
            </div>
          </div>
        </div>

      {/* Conte√∫do principal baseado no modo de visualiza√ß√£o - SCROLL√ÅVEL */}
      <div className="flex-1 overflow-hidden">
        {viewMode === 'kanban' ? (
        /* Visualiza√ß√£o Kanban */
        <div className="h-full flex flex-col">
          <DragDropContext onDragEnd={handleDragEnd}>
            <div className="h-full flex flex-col">
              {/* Cabe√ßalhos das colunas */}
              <div className="flex border-b border-gray-200 bg-gray-50">
                {funnelStages.map((stage) => (
                  <div key={stage.id} className="flex-1 min-w-[280px] p-4 border-r border-gray-200 last:border-r-0">
                    <div className="flex items-center justify-between mb-2">
                      <div className="flex items-center space-x-2">
                        <div 
                          className="w-3 h-3 rounded-full"
                          style={{ backgroundColor: stage.color }}
                        />
                        <h3 className="font-semibold text-gray-900 text-sm">{stage.title}</h3>
                      </div>
                      <Button size="sm" variant="ghost" className="h-6 w-6 p-0">
                        <MoreVertical className="h-3 w-3" />
                      </Button>
                    </div>
                    <div className="text-xs text-gray-600">
                      {stage.value} ‚Ä¢ {stage.count} deals
                    </div>
                  </div>
                ))}
              </div>

              {/* √Årea dos cards - SCROLL√ÅVEL HORIZONTALMENTE */}
              <div className="flex-1 flex overflow-x-auto overflow-y-hidden">
                {funnelStages.map((stage) => (
                  <Droppable key={stage.id} droppableId={stage.id} type="stage">
                    {(provided: any, snapshot: any) => (
                      <div 
                        ref={provided.innerRef}
                        {...provided.droppableProps}
                        className={`flex-1 min-w-[280px] p-4 border-r border-gray-200 last:border-r-0 bg-gray-50 ${
                          snapshot.isDraggingOver ? 'bg-blue-50' : ''
                        }`}
                      >
                        <div className="space-y-3 min-h-[400px]">
                          {stage.deals.map((deal, index) => (
                            <Draggable key={deal.id} draggableId={deal.id} index={index}>
                              {(provided: any, snapshot: any) => (
                                <div
                                  ref={provided.innerRef}
                                  {...provided.draggableProps}
                                  {...provided.dragHandleProps}
                                  className={`bg-white rounded-lg border p-4 cursor-pointer hover:shadow-md transition-shadow ${
                                    deal.status === 'won' ? 'bg-green-50 border-green-200' : ''
                                  } ${snapshot.isDragging ? 'shadow-lg rotate-2' : ''}`}
                                  onClick={() => handleLeadClick(deal.id)}
                                >
                                  {/* Cabe√ßalho do card */}
                                  <div className="flex items-start justify-between mb-2">
                                    <div className="flex-1">
                                      <h4 className="font-medium text-gray-900 text-sm mb-1">
                                        {deal.title}
                                      </h4>
                                      <p className="text-xs text-gray-600 mb-2">
                                        {deal.company}
                                      </p>
                                    </div>
                                    <div className="flex items-center space-x-1">
                                      {deal.status === 'won' && (
                                        <span className="bg-green-100 text-green-800 text-xs px-2 py-1 rounded-full font-medium">
                                          WON
                                        </span>
                                      )}
                                      <div className={`w-2 h-2 rounded-full ${
                                        deal.status === 'active' ? 'bg-green-500' :
                                        deal.status === 'warning' ? 'bg-yellow-500' :
                                        deal.status === 'issue' ? 'bg-red-500' :
                                        deal.status === 'won' ? 'bg-green-600' :
                                        'bg-gray-400'
                                      }`} />
                                    </div>
                                  </div>

                                  {/* Informa√ß√µes do lead */}
                                  <div className="space-y-1">
                                    <div className="flex items-center space-x-2">
                                      <User className="h-3 w-3 text-gray-400" />
                                      <span className="text-xs text-gray-600">{deal.contact}</span>
                                    </div>
                                    <div className="flex items-center space-x-2">
                                      <DollarSign className="h-3 w-3 text-gray-400" />
                                      <span className="text-sm font-medium text-gray-900">{deal.value}</span>
                                    </div>
                                  </div>
                                </div>
                              )}
                            </Draggable>
                          ))}
                          {provided.placeholder}
                          
                          {/* Bot√£o adicionar lead */}
                          <Button
                            variant="ghost"
                            className="w-full border-2 border-dashed border-gray-300 text-gray-500 hover:border-gray-400 hover:text-gray-700 py-4 rounded-lg"
                            onClick={() => setShowCreateDeal(true)}
                          >
                            <Plus className="h-4 w-4 mr-2" />
                            Adicionar Lead
                          </Button>
                        </div>
                      </div>
                    )}
                  </Droppable>
                ))}
              </div>

              {/* √Årea de drop para a√ß√µes */}
              <div className="border-t border-gray-200 bg-gray-50 p-4">
                <div className="flex justify-center space-x-8">
                  <div className="flex items-center space-x-2 text-gray-500 text-sm">
                    <div className="w-8 h-8 border-2 border-dashed border-gray-300 rounded flex items-center justify-center">
                      <Trash2 className="h-4 w-4" />
                    </div>
                    <span>DELETE</span>
                  </div>
                  <div className="flex items-center space-x-2 text-red-500 text-sm">
                    <div className="w-8 h-8 border-2 border-dashed border-red-300 rounded flex items-center justify-center">
                      <X className="h-4 w-4" />
                    </div>
                    <span>LOST</span>
                  </div>
                  <div className="flex items-center space-x-2 text-green-500 text-sm">
                    <div className="w-8 h-8 border-2 border-dashed border-green-300 rounded flex items-center justify-center">
                      <Target className="h-4 w-4" />
                    </div>
                    <span>WON</span>
                  </div>
                  <div className="flex items-center space-x-2 text-gray-500 text-sm">
                    <div className="w-8 h-8 border-2 border-dashed border-gray-300 rounded flex items-center justify-center">
                      <ArrowUpDown className="h-4 w-4" />
                    </div>
                    <span>MOVE/CONVERT</span>
                  </div>
                </div>
              </div>
            </div>
          </DragDropContext>
        </div>
        ) : (
        /* Visualiza√ß√£o Lista (estilo ClickUp) - SCROLL√ÅVEL */
        <div className="h-full flex flex-col">
            {/* Cabe√ßalho da tabela */}
            <div className="bg-gray-50 border-b border-gray-200">
              <div className="px-6 py-3">
                <div className="grid grid-cols-12 gap-4 text-xs font-medium text-gray-500 uppercase tracking-wider">
                  <div className="col-span-4 flex items-center">
                    <input type="checkbox" className="mr-3 rounded" />
                    <span>Lead</span>
                  </div>
                  <div className="col-span-2">Empresa</div>
                  <div className="col-span-1">Valor</div>
                  <div className="col-span-1">Est√°gio</div>
                  <div className="col-span-1">Status</div>
                  <div className="col-span-1">Prioridade</div>
                  <div className="col-span-1">Data</div>
                  <div className="col-span-1">A√ß√µes</div>
                </div>
              </div>
            </div>

            {/* Lista de leads */}
            <div className="flex-1 overflow-y-auto">
              {filteredLeads.map((lead) => {
                const stage = stages.find(s => s.id === lead.stage_id);
                return (
                  <div
                    key={lead.id}
                    className="border-b border-gray-200 hover:bg-gray-50 transition-colors"
                  >
                    <div className="px-6 py-4">
                      <div className="grid grid-cols-12 gap-4 items-center">
                        {/* Lead */}
                        <div className="col-span-4 flex items-center">
                          <input type="checkbox" className="mr-3 rounded" />
                          <div className="flex items-center space-x-3">
                            <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                              <User className="h-4 w-4 text-blue-600" />
                            </div>
                            <div>
                              <div className="font-medium text-gray-900">{lead.name}</div>
                              <div className="text-sm text-gray-500">{lead.email}</div>
                            </div>
                          </div>
                        </div>

                        {/* Empresa */}
                        <div className="col-span-2">
                          <div className="text-sm text-gray-900">{lead.company}</div>
                          <div className="text-xs text-gray-500">{lead.phone}</div>
                        </div>

                        {/* Valor */}
                        <div className="col-span-1">
                          <div className="font-medium text-gray-900">
                            {formatCurrency(lead.value || 0)}
                          </div>
                        </div>

                        {/* Est√°gio */}
                        <div className="col-span-1">
                          {stage && (
                            <div className="flex items-center space-x-2">
                              <div
                                className="w-2 h-2 rounded-full"
                                style={{ backgroundColor: stage.color }}
                              />
                              <span className="text-sm text-gray-900">{stage.name}</span>
                            </div>
                          )}
                        </div>

                        {/* Status */}
                        <div className="col-span-1">
                          <Badge
                            variant={lead.status === 'won' ? 'default' : 'secondary'}
                            className={`text-xs ${
                              lead.status === 'won' 
                                ? 'bg-green-100 text-green-800' 
                                : 'bg-gray-100 text-gray-800'
                            }`}
                          >
                            {lead.status === 'won' ? 'Ganho' : 'Ativo'}
                          </Badge>
                        </div>

                        {/* Prioridade */}
                        <div className="col-span-1">
                          <Badge
                            variant="outline"
                            className={`text-xs ${
                              lead.priority === 'urgent' 
                                ? 'border-red-300 text-red-700' 
                                : lead.priority === 'high'
                                ? 'border-orange-300 text-orange-700'
                                : 'border-gray-300 text-gray-700'
                            }`}
                          >
                            {getPriorityLabel(lead.priority)}
                          </Badge>
                        </div>

                        {/* Data */}
                        <div className="col-span-1">
                          <div className="text-sm text-gray-900">
                            {formatDate(lead.created_at)}
                          </div>
                        </div>

                        {/* A√ß√µes */}
                        <div className="col-span-1">
                          <div className="flex items-center space-x-2">
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={() => handleLeadClick(lead.id)}
                              className="h-8 w-8 p-0"
                            >
                              <Eye className="h-4 w-4" />
                            </Button>
                            <Button
                              variant="ghost"
                              size="sm"
                              className="h-8 w-8 p-0"
                            >
                              <MoreVertical className="h-4 w-4" />
                            </Button>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                );
              })}

              {/* Bot√£o adicionar lead na lista */}
              <div className="px-6 py-4 border-b border-gray-200">
                <Button
                  variant="ghost"
                  className="w-full border-2 border-dashed border-gray-300 text-gray-500 hover:border-gray-400 hover:text-gray-700 py-4 rounded-lg"
                  onClick={() => setShowCreateDeal(true)}
                >
                  <Plus className="h-4 w-4 mr-2" />
                  Adicionar Lead
                </Button>
              </div>
            </div>
          </div>
        </div>
        )}
      </div>

      {/* Bot√£o flutuante de novo lead */}
      <Button
        onClick={() => setShowCreateDeal(true)}
        className="fixed bottom-6 right-6 w-14 h-14 rounded-full shadow-lg z-50 transition-colors duration-200 bg-blue-600 hover:bg-blue-700"
      >
        <Plus className="h-5 w-5 text-white" />
      </Button>

      {/* Modais */}
      <>
        <CreateDealModal
          open={showCreateDeal}
          onClose={() => setShowCreateDeal(false)}
        />
      
      <CreatePipelineModal 
        open={showCreatePipeline} 
        onClose={() => setShowCreatePipeline(false)}
        onPipelineCreated={(pipeline) => {
          setSelectedPipeline(pipeline.name);
          setShowCreatePipeline(false);
        }}
      />

      <LeadExpandedModal
        lead={selectedLeadData}
        isOpen={!!expandedLead}
        onClose={() => setExpandedLead(null)}
        onEdit={() => {}}
      />

      {/* Modal de Automa√ß√µes */}
      {isAutomationModalOpen && (
        <div className="fixed inset-0 z-50 flex items-center justify-center p-4">
          {/* Overlay */}
          <div 
            className="absolute inset-0 bg-black/50 backdrop-blur-sm"
            onClick={() => setIsAutomationModalOpen(false)}
          />
          
          {/* Modal Content */}
          <div className="relative w-full max-w-md bg-white rounded-2xl shadow-xl border border-gray-200 overflow-hidden">
            {/* Header */}
            <div className="px-6 py-4 border-b border-gray-200 bg-gray-50">
              <div className="flex items-center justify-between">
                <h2 className="text-xl font-semibold text-gray-900">Automatize</h2>
                <button
                  onClick={() => setIsAutomationModalOpen(false)}
                  className="p-2 hover:bg-gray-200 rounded-lg transition-colors duration-200"
                >
                  <X className="h-5 w-5 text-gray-500" />
                </button>
              </div>
            </div>
            
            {/* Body */}
            <div className="px-6 py-6">
              <div className="w-full h-40 border-2 border-dashed border-gray-300 rounded-lg bg-gray-50 flex items-center justify-center">
                <span className="text-gray-500 text-sm">Espa√ßo para futuras automa√ß√µes de leads</span>
              </div>
            </div>
          </div>
        </div>
      )}
      </>
    </div>
  );
};

export default LeadsSales;
