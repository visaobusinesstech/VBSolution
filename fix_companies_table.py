#!/usr/bin/env python3
"""
Script para verificar e corrigir problemas na tabela companies
"""

import os
import sys
from supabase import create_client, Client
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente
load_dotenv()

# Configura√ß√£o do Supabase
SUPABASE_URL = "https://nrbsocawokmihvxfcpso.supabase.co"
SUPABASE_KEY = os.getenv("SUPABASE_SERVICE_ROLE_KEY") or "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5yYnNvY2F3b2ttaWh2eGZjcHNvIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NjQ3NDA1MywiZXhwIjoyMDcyMDUwMDUzfQ.3SxEVRNNBHhAXgJ7S2BMHm1QWq9kxYamuLjvZm0_OU0"

def create_supabase_client() -> Client:
    """Criar cliente Supabase"""
    try:
        return create_client(SUPABASE_URL, SUPABASE_KEY)
    except Exception as e:
        print(f"‚ùå Erro ao criar cliente Supabase: {e}")
        return None

def check_table_structure(supabase: Client):
    """Verificar estrutura da tabela companies"""
    print("üîç Verificando estrutura da tabela companies...")
    
    try:
        # Verificar se a tabela existe
        result = supabase.table('companies').select('*').limit(1).execute()
        print("‚úÖ Tabela companies existe e √© acess√≠vel")
        
        # Verificar estrutura
        if result.data:
            print("üìã Estrutura da tabela:")
            for key in result.data[0].keys():
                print(f"  - {key}")
        
        return True
    except Exception as e:
        print(f"‚ùå Erro ao verificar tabela companies: {e}")
        return False

def check_rls_policies(supabase: Client):
    """Verificar pol√≠ticas RLS"""
    print("\nüîç Verificando pol√≠ticas RLS...")
    
    try:
        # Verificar se RLS est√° habilitado
        result = supabase.rpc('check_rls_enabled', {'table_name': 'companies'}).execute()
        print("‚úÖ RLS verificado")
        return True
    except Exception as e:
        print(f"‚ö†Ô∏è  N√£o foi poss√≠vel verificar RLS: {e}")
        return False

def check_profiles_table(supabase: Client):
    """Verificar tabela profiles"""
    print("\nüîç Verificando tabela profiles...")
    
    try:
        result = supabase.table('profiles').select('*').limit(1).execute()
        print("‚úÖ Tabela profiles existe e √© acess√≠vel")
        
        if result.data:
            print("üìã Estrutura da tabela profiles:")
            for key in result.data[0].keys():
                print(f"  - {key}")
        
        return True
    except Exception as e:
        print(f"‚ùå Erro ao verificar tabela profiles: {e}")
        return False

def create_missing_tables(supabase: Client):
    """Criar tabelas que est√£o faltando"""
    print("\nüîß Criando tabelas que est√£o faltando...")
    
    # SQL para criar tabela profiles se n√£o existir
    profiles_sql = """
    CREATE TABLE IF NOT EXISTS public.profiles (
        id UUID REFERENCES auth.users(id) PRIMARY KEY,
        email TEXT NOT NULL,
        name TEXT NOT NULL,
        company TEXT,
        avatar_url TEXT,
        position TEXT,
        department TEXT,
        role TEXT DEFAULT 'user',
        phone TEXT,
        address TEXT,
        preferences JSONB DEFAULT '{}',
        created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
        updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()
    );
    """
    
    # SQL para criar tabela companies se n√£o existir
    companies_sql = """
    CREATE TABLE IF NOT EXISTS public.companies (
        id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
        owner_id UUID NOT NULL REFERENCES public.profiles(id),
        fantasy_name TEXT NOT NULL,
        company_name TEXT,
        cnpj TEXT,
        reference TEXT,
        cep TEXT,
        address TEXT,
        city TEXT,
        state TEXT,
        email TEXT,
        phone TEXT,
        logo_url TEXT,
        description TEXT,
        sector TEXT,
        status TEXT DEFAULT 'active',
        settings JSONB DEFAULT '{}',
        created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
        updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()
    );
    """
    
    try:
        # Executar SQL para profiles
        print("üìù Criando tabela profiles...")
        supabase.rpc('exec_sql', {'sql': profiles_sql}).execute()
        print("‚úÖ Tabela profiles criada/verificada")
        
        # Executar SQL para companies
        print("üìù Criando tabela companies...")
        supabase.rpc('exec_sql', {'sql': companies_sql}).execute()
        print("‚úÖ Tabela companies criada/verificada")
        
        return True
    except Exception as e:
        print(f"‚ùå Erro ao criar tabelas: {e}")
        return False

def enable_rls_and_policies(supabase: Client):
    """Habilitar RLS e criar pol√≠ticas"""
    print("\nüîß Habilitando RLS e criando pol√≠ticas...")
    
    try:
        # Habilitar RLS
        rls_sql = """
        ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
        ALTER TABLE public.companies ENABLE ROW LEVEL SECURITY;
        """
        
        # Criar pol√≠ticas
        policies_sql = """
        -- Pol√≠tica para profiles
        DROP POLICY IF EXISTS "Usu√°rios s√≥ veem seu pr√≥prio perfil" ON public.profiles;
        CREATE POLICY "Usu√°rios s√≥ veem seu pr√≥prio perfil" ON public.profiles
            FOR ALL USING (auth.uid() = id);
        
        -- Pol√≠tica para companies
        DROP POLICY IF EXISTS "Usu√°rios s√≥ veem suas pr√≥prias empresas" ON public.companies;
        CREATE POLICY "Usu√°rios s√≥ veem suas pr√≥prias empresas" ON public.companies
            FOR ALL USING (owner_id = auth.uid());
        
        DROP POLICY IF EXISTS "Usu√°rios podem criar empresas" ON public.companies;
        CREATE POLICY "Usu√°rios podem criar empresas" ON public.companies
            FOR INSERT WITH CHECK (owner_id = auth.uid());
        
        DROP POLICY IF EXISTS "Usu√°rios podem editar suas empresas" ON public.companies;
        CREATE POLICY "Usu√°rios podem editar suas empresas" ON public.companies
            FOR UPDATE USING (owner_id = auth.uid());
        
        DROP POLICY IF EXISTS "Usu√°rios podem excluir suas empresas" ON public.companies;
        CREATE POLICY "Usu√°rios podem excluir suas empresas" ON public.companies
            FOR DELETE USING (owner_id = auth.uid());
        """
        
        # Executar SQL
        print("üîí Habilitando RLS...")
        supabase.rpc('exec_sql', {'sql': rls_sql}).execute()
        
        print("üìã Criando pol√≠ticas...")
        supabase.rpc('exec_sql', {'sql': policies_sql}).execute()
        
        print("‚úÖ RLS e pol√≠ticas configurados")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao configurar RLS: {e}")
        return False

def test_connection(supabase: Client):
    """Testar conex√£o e permiss√µes"""
    print("\nüß™ Testando conex√£o e permiss√µes...")
    
    try:
        # Testar acesso √† tabela companies
        result = supabase.table('companies').select('count').execute()
        print("‚úÖ Acesso √† tabela companies OK")
        
        # Testar acesso √† tabela profiles
        result = supabase.table('profiles').select('count').execute()
        print("‚úÖ Acesso √† tabela profiles OK")
        
        return True
    except Exception as e:
        print(f"‚ùå Erro no teste de conex√£o: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("üöÄ Iniciando verifica√ß√£o e corre√ß√£o da tabela companies...")
    
    # Criar cliente Supabase
    supabase = create_supabase_client()
    if not supabase:
        print("‚ùå N√£o foi poss√≠vel criar cliente Supabase")
        return
    
    print("‚úÖ Cliente Supabase criado com sucesso")
    
    # Verificar estrutura das tabelas
    companies_ok = check_table_structure(supabase)
    profiles_ok = check_profiles_table(supabase)
    
    # Se alguma tabela n√£o existir, criar
    if not companies_ok or not profiles_ok:
        print("\n‚ö†Ô∏è  Algumas tabelas est√£o faltando, criando...")
        if create_missing_tables(supabase):
            print("‚úÖ Tabelas criadas com sucesso")
        else:
            print("‚ùå Erro ao criar tabelas")
            return
    
    # Verificar e configurar RLS
    if not check_rls_policies(supabase):
        print("\n‚ö†Ô∏è  Configurando RLS...")
        if enable_rls_and_policies(supabase):
            print("‚úÖ RLS configurado com sucesso")
        else:
            print("‚ùå Erro ao configurar RLS")
    
    # Testar conex√£o final
    if test_connection(supabase):
        print("\nüéâ Verifica√ß√£o conclu√≠da com sucesso!")
        print("‚úÖ A tabela companies deve estar funcionando corretamente")
    else:
        print("\n‚ùå Ainda h√° problemas de conex√£o")
    
    print("\nüìã Resumo das a√ß√µes:")
    print("1. ‚úÖ Verifica√ß√£o de estrutura das tabelas")
    print("2. ‚úÖ Cria√ß√£o de tabelas faltantes (se necess√°rio)")
    print("3. ‚úÖ Configura√ß√£o de RLS e pol√≠ticas")
    print("4. ‚úÖ Teste de conex√£o")

if __name__ == "__main__":
    main()
