#!/usr/bin/env python3
"""
Script para verificar o mapeamento completo do sistema CRM
VBSolution - Sistema CRM Completo
"""

import requests
import json
from datetime import datetime

# Configura√ß√µes do Supabase
SUPABASE_URL = "https://nrbsocawokmihvxfcpso.supabase.co"
SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5yYnNvY2F3b2ttaWh2eGZjcHNvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTY0NzQwNTMsImV4cCI6MjA3MjA1MDA1M30.3SxEVRNNBHhAXgJ7S2BMHm1QWq9kxYamuLjvZm0_OU0"

# Headers para as requisi√ß√µes
headers = {
    'apikey': SUPABASE_ANON_KEY,
    'Authorization': f'Bearer {SUPABASE_ANON_KEY}',
    'Content-Type': 'application/json',
    'Prefer': 'return=minimal'
}

def log(message, level="INFO"):
    """Fun√ß√£o para logging com timestamp"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"[{timestamp}] {level}: {message}")

def check_table_access(table_name):
    """Verificar acesso a uma tabela espec√≠fica"""
    try:
        response = requests.get(f"{SUPABASE_URL}/rest/v1/{table_name}?select=*&limit=1", headers=headers)
        
        if response.status_code == 200:
            data = response.json()
            return True, len(data), "‚úÖ Acess√≠vel"
        elif response.status_code in [401, 403]:
            return False, 0, "üîí Acesso negado (RLS ativo)"
        elif response.status_code == 404:
            return False, 0, "‚ùå Tabela n√£o encontrada"
        else:
            return False, 0, f"‚ö†Ô∏è Erro {response.status_code}"
            
    except Exception as e:
        return False, 0, f"‚ùå Erro: {str(e)}"

def check_page_table_mapping():
    """Verificar mapeamento das p√°ginas com suas tabelas"""
    log("üîç VERIFICANDO MAPEAMENTO COMPLETO DO SISTEMA")
    log("=" * 80)
    
    # Mapeamento das p√°ginas e suas tabelas principais
    page_mapping = {
        "üè† Dashboard (Index.tsx)": ["activities", "companies", "deals", "leads", "products", "projects"],
        "üéØ Activities (Activities.tsx)": ["activities", "profiles", "employees", "companies", "projects"],
        "üè¢ Companies (Companies.tsx)": ["companies", "profiles", "employees"],
        "üë• Employees (Employees.tsx)": ["employees", "profiles", "companies", "work_groups"],
        "üì¶ Products (Products.tsx)": ["products", "profiles", "companies", "suppliers"],
        "üìä Projects (Projects.tsx)": ["projects", "profiles", "employees", "companies"],
        "üé£ Leads (LeadsSales.tsx)": ["leads", "profiles", "companies", "employees"],
        "üí∞ Deals (SalesFunnel.tsx)": ["deals", "profiles", "companies", "leads"],
        "üì¶ Inventory (Inventory.tsx)": ["inventory", "profiles", "products", "companies"],
        "üõí Sales Orders (SalesOrders.tsx)": ["orders", "profiles", "customers", "products"],
        "üì± WhatsApp (WhatsApp.tsx)": ["whatsapp_atendimentos", "whatsapp_mensagens", "profiles"],
        "üìà Reports (Reports.tsx)": ["activities", "companies", "deals", "leads", "products", "projects"],
        "‚öôÔ∏è Settings (Settings.tsx)": ["profiles", "company_settings"],
        "üîß Work Groups (WorkGroups.tsx)": ["work_groups", "profiles", "employees"],
        "üè≠ Suppliers (Suppliers.tsx)": ["suppliers", "profiles", "companies"],
        "üìÖ Calendar (Calendar.tsx)": ["activities", "events", "profiles"],
        "üí¨ Chat (Chat.tsx)": ["messages", "profiles", "chat_rooms"],
        "üìÅ Files (Files.tsx)": ["files", "profiles", "companies"],
        "üìã Documents (Documents.tsx)": ["documents", "profiles", "companies"],
        "üë§ Collaborations (Collaborations.tsx)": ["collaborations", "profiles", "companies"]
    }
    
    # Verificar cada p√°gina e suas tabelas
    total_pages = len(page_mapping)
    working_pages = 0
    problematic_pages = 0
    
    for page_name, tables in page_mapping.items():
        log(f"\nüì± {page_name}")
        log("-" * 60)
        
        page_working = True
        table_status = []
        
        for table in tables:
            accessible, count, status = check_table_access(table)
            table_status.append(f"  {table}: {status}")
            
            if not accessible and table in ["activities", "companies", "profiles"]:
                page_working = False
        
        # Mostrar status das tabelas
        for status in table_status:
            log(status)
        
        if page_working:
            log("  ‚úÖ P√ÅGINA FUNCIONANDO")
            working_pages += 1
        else:
            log("  ‚ùå P√ÅGINA COM PROBLEMAS")
            problematic_pages += 1
    
    return working_pages, problematic_pages, total_pages

def check_critical_tables():
    """Verificar tabelas cr√≠ticas do sistema"""
    log("\nüîç VERIFICANDO TABELAS CR√çTICAS")
    log("=" * 60)
    
    critical_tables = [
        "profiles",      # Usu√°rios do sistema
        "activities",    # Atividades (p√°gina com loading eterno)
        "companies",     # Empresas
        "employees",     # Funcion√°rios
        "products",      # Produtos
        "projects",      # Projetos
        "leads",         # Leads
        "deals"          # Neg√≥cios
    ]
    
    critical_status = {}
    
    for table in critical_tables:
        accessible, count, status = check_table_access(table)
        critical_status[table] = {
            "accessible": accessible,
            "count": count,
            "status": status
        }
        
        log(f"{table}: {status} ({count} registros)")
    
    return critical_status

def check_rls_status():
    """Verificar status do RLS (Row Level Security)"""
    log("\nüîí VERIFICANDO STATUS DO RLS")
    log("=" * 60)
    
    # Tentar acessar dados sem autentica√ß√£o (deve falhar com RLS ativo)
    test_tables = ["activities", "companies", "profiles"]
    
    for table in test_tables:
        try:
            response = requests.get(f"{SUPABASE_URL}/rest/v1/{table}?select=*&limit=1", headers=headers)
            
            if response.status_code in [401, 403]:
                log(f"{table}: ‚úÖ RLS ativo (acesso negado sem autentica√ß√£o)")
            elif response.status_code == 200:
                data = response.json()
                if len(data) == 0:
                    log(f"{table}: ‚ö†Ô∏è RLS pode n√£o estar ativo (tabela vazia)")
                else:
                    log(f"{table}: ‚ùå RLS n√£o est√° ativo (dados acess√≠veis sem autentica√ß√£o)")
            else:
                log(f"{table}: ‚ùì Status inesperado ({response.status_code})")
                
        except Exception as e:
            log(f"{table}: ‚ùå Erro ao verificar RLS: {str(e)}")

def generate_system_report():
    """Gerar relat√≥rio completo do sistema"""
    log("\nüìä RELAT√ìRIO COMPLETO DO SISTEMA")
    log("=" * 80)
    
    # Verificar mapeamento das p√°ginas
    working_pages, problematic_pages, total_pages = check_page_table_mapping()
    
    # Verificar tabelas cr√≠ticas
    critical_status = check_critical_tables()
    
    # Verificar RLS
    check_rls_status()
    
    # Resumo final
    log("\n" + "=" * 80)
    log("üìä RESUMO FINAL DO MAPEAMENTO:")
    log(f"   üì± Total de p√°ginas: {total_pages}")
    log(f"   ‚úÖ P√°ginas funcionando: {working_pages}")
    log(f"   ‚ùå P√°ginas com problemas: {problematic_pages}")
    log(f"   üìà Taxa de sucesso: {(working_pages/total_pages)*100:.1f}%")
    
    # An√°lise das tabelas cr√≠ticas
    critical_accessible = sum(1 for status in critical_status.values() if status["accessible"])
    critical_total = len(critical_status)
    
    log(f"\nüîë TABELAS CR√çTICAS:")
    log(f"   ‚úÖ Acess√≠veis: {critical_accessible}/{critical_total}")
    log(f"   ‚ùå Inacess√≠veis: {critical_total - critical_accessible}")
    
    # Recomenda√ß√µes
    log("\nüí° RECOMENDA√á√ïES:")
    
    if problematic_pages > 0:
        log("   1. Execute o script MAPEAMENTO_COMPLETO_SISTEMA.sql no Supabase")
        log("   2. Verifique se todas as tabelas foram criadas corretamente")
        log("   3. Confirme que as pol√≠ticas RLS est√£o ativas")
        log("   4. Teste novamente ap√≥s aplicar as corre√ß√µes")
    
    if critical_accessible < critical_total:
        log("   1. Verifique a estrutura das tabelas cr√≠ticas")
        log("   2. Confirme que as permiss√µes est√£o corretas")
        log("   3. Teste o acesso a cada tabela individualmente")
    
    if working_pages == total_pages:
        log("   üéâ SISTEMA 100% FUNCIONANDO!")
        log("   üí° Todas as p√°ginas est√£o sincronizadas com suas tabelas")
    
    log("\n" + "=" * 80)

def main():
    """Fun√ß√£o principal"""
    log("üöÄ VERIFICA√á√ÉO COMPLETA DO MAPEAMENTO DO SISTEMA CRM")
    log("=" * 80)
    
    try:
        generate_system_report()
        return True
    except Exception as e:
        log(f"‚ùå Erro durante a verifica√ß√£o: {str(e)}", "ERROR")
        return False

if __name__ == "__main__":
    try:
        success = main()
        exit(0 if success else 1)
    except KeyboardInterrupt:
        log("\n‚ö†Ô∏è Verifica√ß√£o interrompida pelo usu√°rio", "WARNING")
        exit(1)
    except Exception as e:
        log(f"\n‚ùå Erro inesperado: {str(e)}", "ERROR")
        exit(1)
