const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: './frontend/.env.local' });

const supabase = createClient(
  process.env.VITE_SUPABASE_URL,
  process.env.VITE_SUPABASE_ANON_KEY
);

async function testAIPersistence() {
  console.log('üß™ Testando persist√™ncia das configura√ß√µes do AI...');
  
  try {
    // 1. Verificar se a tabela existe
    console.log('1Ô∏è‚É£ Verificando se a tabela ai_agent_configs existe...');
    const { data: tables, error: tableError } = await supabase
      .from('information_schema.tables')
      .select('table_name')
      .eq('table_schema', 'public')
      .eq('table_name', 'ai_agent_configs');
    
    if (tableError) {
      console.error('‚ùå Erro ao verificar tabelas:', tableError);
      return;
    }
    
    if (tables.length === 0) {
      console.log('‚ö†Ô∏è Tabela ai_agent_configs n√£o existe. Execute o SQL no Supabase primeiro.');
      console.log('üìÑ Execute o arquivo: create_ai_agent_configs_simple.sql');
      return;
    }
    
    console.log('‚úÖ Tabela ai_agent_configs existe!');
    
    // 2. Verificar configura√ß√µes existentes
    console.log('2Ô∏è‚É£ Verificando configura√ß√µes existentes...');
    const { data: configs, error: configError } = await supabase
      .from('ai_agent_configs')
      .select('*');
    
    if (configError) {
      console.error('‚ùå Erro ao buscar configura√ß√µes:', configError);
      return;
    }
    
    console.log('üìä Configura√ß√µes encontradas:', configs.length);
    configs.forEach((config, index) => {
      console.log(`\nü§ñ Configura√ß√£o ${index + 1}:`);
      console.log(`   Nome: ${config.name}`);
      console.log(`   Fun√ß√£o: ${config.function}`);
      console.log(`   Personalidade: ${config.personality}`);
      console.log(`   Status: ${config.status}`);
      console.log(`   Modelo: ${config.selected_model}`);
      console.log(`   API Key: ${config.api_key ? 'Configurada' : 'N√£o configurada'}`);
      console.log(`   Owner ID: ${config.owner_id}`);
    });
    
    // 3. Testar atualiza√ß√£o de configura√ß√£o
    console.log('\n3Ô∏è‚É£ Testando atualiza√ß√£o de configura√ß√£o...');
    const testConfig = {
      name: 'Assistente Virtual VB - Teste',
      personality: 'Muito amig√°vel e prestativo',
      tone: 'Conversacional e descontra√≠do',
      rules: 'Sempre usar emojis e ser muito simp√°tico',
      company_context: 'Empresa de tecnologia inovadora',
      sector: 'Tecnologia',
      company_description: 'Especializada em solu√ß√µes digitais avan√ßadas'
    };
    
    const { data: updatedConfig, error: updateError } = await supabase
      .from('ai_agent_configs')
      .update(testConfig)
      .eq('owner_id', '905b926a-785a-4f6d-9c3a-9455729500b3')
      .select()
      .single();
    
    if (updateError) {
      console.error('‚ùå Erro ao atualizar configura√ß√£o:', updateError);
    } else {
      console.log('‚úÖ Configura√ß√£o atualizada com sucesso!');
      console.log('üìù Nova personalidade:', updatedConfig.personality);
      console.log('üìù Novo tom:', updatedConfig.tone);
    }
    
    // 4. Testar busca de configura√ß√£o ativa
    console.log('\n4Ô∏è‚É£ Testando busca de configura√ß√£o ativa...');
    const { data: activeConfig, error: activeError } = await supabase
      .from('ai_agent_configs')
      .select('*')
      .eq('status', 'active')
      .single();
    
    if (activeError) {
      console.error('‚ùå Erro ao buscar configura√ß√£o ativa:', activeError);
    } else {
      console.log('‚úÖ Configura√ß√£o ativa encontrada!');
      console.log('ü§ñ Nome:', activeConfig.name);
      console.log('ü§ñ Personalidade:', activeConfig.personality);
      console.log('ü§ñ Tom:', activeConfig.tone);
    }
    
    console.log('\nüéâ Teste de persist√™ncia conclu√≠do!');
    console.log('üìã Pr√≥ximos passos:');
    console.log('1. Execute o SQL no Supabase: create_ai_agent_configs_simple.sql');
    console.log('2. Configure uma API key do OpenAI na tabela');
    console.log('3. Teste o AI no frontend');
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

testAIPersistence();

