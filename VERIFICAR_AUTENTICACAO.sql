-- =====================================================
-- VERIFICA√á√ÉO E CORRE√á√ÉO DE AUTENTICA√á√ÉO
-- =====================================================
-- Execute este script para verificar:
-- 1. Status do usu√°rio no auth.users
-- 2. Status do perfil na tabela profiles
-- 3. Corrigir problemas de autentica√ß√£o
-- 4. Resolver loading eterno da p√°gina Activities
-- =====================================================

-- =====================================================
-- 1. VERIFICAR STATUS DO USU√ÅRIO NO AUTH.USERS
-- =====================================================
-- Verificar se o usu√°rio daviresende3322@gmail.com existe
SELECT 
    'Status do Usu√°rio Auth' as verifica√ß√£o,
    CASE 
        WHEN COUNT(*) > 0 THEN '‚úÖ USU√ÅRIO EXISTE NO AUTH'
        ELSE '‚ùå USU√ÅRIO N√ÉO EXISTE NO AUTH'
    END as resultado,
    COUNT(*) as total_usuarios
FROM auth.users 
WHERE email = 'daviresende3322@gmail.com';

-- Verificar dados completos do usu√°rio
SELECT 
    id,
    email,
    created_at,
    last_sign_in_at,
    raw_user_meta_data,
    aud,
    role
FROM auth.users 
WHERE email = 'daviresende3322@gmail.com';

-- =====================================================
-- 2. VERIFICAR STATUS DO PERFIL NA TABELA PROFILES
-- =====================================================
-- Verificar se o perfil existe
SELECT 
    'Status do Perfil' as verifica√ß√£o,
    CASE 
        WHEN COUNT(*) > 0 THEN '‚úÖ PERFIL EXISTE'
        ELSE '‚ùå PERFIL N√ÉO EXISTE'
    END as resultado,
    COUNT(*) as total_perfis
FROM public.profiles 
WHERE email = 'daviresende3322@gmail.com';

-- Verificar dados do perfil
SELECT 
    id,
    email,
    name,
    company,
    role,
    created_at,
    updated_at
FROM public.profiles 
WHERE email = 'daviresende3322@gmail.com';

-- =====================================================
-- 3. VERIFICAR SE O ID DO AUTH.USERS CORRESPONDE AO PROFILES
-- =====================================================
-- Verificar correspond√™ncia entre auth.users e profiles
SELECT 
    'Correspond√™ncia de IDs' as verifica√ß√£o,
    CASE 
        WHEN a.id = p.id THEN '‚úÖ IDS CORRESPONDEM'
        ELSE '‚ùå IDS N√ÉO CORRESPONDEM'
    END as resultado,
    a.id as auth_user_id,
    p.id as profile_id,
    a.email as auth_email,
    p.email as profile_email
FROM auth.users a
LEFT JOIN public.profiles p ON a.id = p.id
WHERE a.email = 'daviresende3322@gmail.com';

-- =====================================================
-- 4. CRIAR PERFIL SE N√ÉO EXISTIR
-- =====================================================
-- Criar perfil para o usu√°rio se n√£o existir
DO $$
DECLARE
    user_id UUID;
    profile_exists BOOLEAN;
BEGIN
    -- Obter ID do usu√°rio no auth.users
    SELECT id INTO user_id FROM auth.users WHERE email = 'daviresende3322@gmail.com';
    
    IF user_id IS NOT NULL THEN
        -- Verificar se o perfil j√° existe
        SELECT EXISTS(SELECT 1 FROM public.profiles WHERE id = user_id) INTO profile_exists;
        
        IF NOT profile_exists THEN
            -- Inserir perfil para o usu√°rio
            INSERT INTO public.profiles (
                id,
                email,
                name,
                company,
                role,
                created_at,
                updated_at
            ) VALUES (
                user_id,
                'daviresende3322@gmail.com',
                'Davi Resende',
                'VBSolution',
                'admin',
                now(),
                now()
            );
            
            RAISE NOTICE '‚úÖ Perfil criado com sucesso para o usu√°rio: %', user_id;
        ELSE
            RAISE NOTICE '‚ÑπÔ∏è Perfil j√° existe para o usu√°rio: %', user_id;
        END IF;
    ELSE
        RAISE NOTICE '‚ùå Usu√°rio n√£o encontrado no auth.users';
    END IF;
END $$;

-- =====================================================
-- 5. VERIFICAR RESULTADO AP√ìS CRIA√á√ÉO
-- =====================================================
-- Verificar se o perfil foi criado
SELECT 
    'Status Final do Perfil' as verifica√ß√£o,
    CASE 
        WHEN COUNT(*) > 0 THEN '‚úÖ PERFIL CRIADO COM SUCESSO'
        ELSE '‚ùå PERFIL AINDA N√ÉO EXISTE'
    END as resultado,
    COUNT(*) as total_perfis
FROM public.profiles 
WHERE email = 'daviresende3322@gmail.com';

-- Verificar perfil espec√≠fico
SELECT 
    id,
    email,
    name,
    company,
    role,
    created_at,
    updated_at
FROM public.profiles 
WHERE email = 'daviresende3322@gmail.com';

-- =====================================================
-- 6. VERIFICAR RLS E POL√çTICAS
-- =====================================================
-- Verificar se RLS est√° ativo na tabela profiles
SELECT 
    'RLS Profiles' as verifica√ß√£o,
    CASE 
        WHEN rowsecurity THEN '‚úÖ RLS ATIVO'
        ELSE '‚ùå RLS INATIVO'
    END as resultado
FROM pg_tables 
WHERE schemaname = 'public' 
  AND tablename = 'profiles';

-- Verificar pol√≠ticas RLS da tabela profiles
SELECT 
    policyname,
    cmd,
    qual,
    with_check
FROM pg_policies 
WHERE schemaname = 'public' 
  AND tablename = 'profiles';

-- =====================================================
-- 7. VERIFICAR TABELA ACTIVITIES
-- =====================================================
-- Verificar se a tabela activities tem RLS ativo
SELECT 
    'RLS Activities' as verifica√ß√£o,
    CASE 
        WHEN rowsecurity THEN '‚úÖ RLS ATIVO'
        ELSE '‚ùå RLS INATIVO'
    END as resultado
FROM pg_tables 
WHERE schemaname = 'public' 
  AND tablename = 'activities';

-- Verificar pol√≠ticas RLS da tabela activities
SELECT 
    policyname,
    cmd,
    qual,
    with_check
FROM pg_policies 
WHERE schemaname = 'public' 
  AND tablename = 'activities';

-- =====================================================
-- 8. TESTAR INSER√á√ÉO DE ATIVIDADE
-- =====================================================
-- Tentar inserir uma atividade de teste
DO $$
DECLARE
    user_id UUID;
    activity_id UUID;
BEGIN
    -- Obter ID do usu√°rio
    SELECT id INTO user_id FROM auth.users WHERE email = 'daviresende3322@gmail.com';
    
    IF user_id IS NOT NULL THEN
        -- Tentar inserir uma atividade de teste
        INSERT INTO public.activities (
            title,
            description,
            type,
            status,
            priority,
            due_date,
            owner_id,
            created_at,
            updated_at
        ) VALUES (
            'Atividade de Teste - Autentica√ß√£o',
            'Teste para verificar se a autentica√ß√£o est√° funcionando',
            'task',
            'pending',
            'medium',
            now() + interval '7 days',
            user_id,
            now(),
            now()
        ) RETURNING id INTO activity_id;
        
        RAISE NOTICE '‚úÖ Atividade de teste criada com ID: %', activity_id;
        
        -- Limpar a atividade de teste
        DELETE FROM public.activities WHERE id = activity_id;
        RAISE NOTICE 'üßπ Atividade de teste removida';
        
    ELSE
        RAISE NOTICE '‚ùå Usu√°rio n√£o encontrado no auth.users';
    END IF;
END $$;

-- =====================================================
-- 9. DIAGN√ìSTICO FINAL
-- =====================================================
-- Resumo do diagn√≥stico de autentica√ß√£o
SELECT 
    'DIAGN√ìSTICO DE AUTENTICA√á√ÉO' as tipo,
    CASE 
        WHEN (SELECT COUNT(*) FROM auth.users WHERE email = 'daviresende3322@gmail.com') > 0 
             AND (SELECT COUNT(*) FROM public.profiles WHERE email = 'daviresende3322@gmail.com') > 0
             AND (SELECT rowsecurity FROM pg_tables WHERE schemaname = 'public' AND tablename = 'profiles')
             AND (SELECT rowsecurity FROM pg_tables WHERE schemaname = 'public' AND tablename = 'activities')
        THEN '‚úÖ AUTENTICA√á√ÉO FUNCIONANDO - VERIFICAR FRONTEND'
        ELSE '‚ùå PROBLEMA DE AUTENTICA√á√ÉO - VERIFICAR SUPABASE'
    END as status,
    'Ap√≥s executar este script, teste a p√°gina Activities novamente' as recomendacao;

-- =====================================================
-- INSTRU√á√ïES PARA TESTE
-- =====================================================
/*
üéØ AP√ìS EXECUTAR ESTE SCRIPT:

1. ‚úÖ O perfil do usu√°rio ser√° criado (se n√£o existir)
2. ‚úÖ A autentica√ß√£o ser√° verificada
3. ‚úÖ RLS ser√° verificado
4. ‚úÖ Uma atividade de teste ser√° criada e removida

üí° PARA TESTAR:
1. Execute este script no Supabase
2. Verifique se o perfil foi criado
3. Acesse a p√°gina Activities no frontend
4. O loading eterno deve ser resolvido

üö® IMPORTANTE:
- O usu√°rio deve estar logado no sistema
- O perfil deve ser criado automaticamente
- RLS deve estar configurado corretamente
- A p√°gina Activities deve funcionar
*/

-- =====================================================
-- COMENT√ÅRIOS IMPORTANTES
-- =====================================================
-- Este script:
-- 1. ‚úÖ Verifica status completo da autentica√ß√£o
-- 2. ‚úÖ Cria perfil se n√£o existir
-- 3. ‚úÖ Verifica RLS e pol√≠ticas
-- 4. ‚úÖ Testa funcionalidades cr√≠ticas
-- 5. ‚úÖ Fornece diagn√≥stico detalhado
-- =====================================================
-- Execute este script para resolver:
-- - Problemas de autentica√ß√£o
-- - Perfil n√£o criado
-- - Loading eterno na p√°gina Activities
-- - Problemas de RLS
-- =====================================================
