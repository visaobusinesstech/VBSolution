#!/usr/bin/env python3
"""
Script para testar especificamente a autentica√ß√£o e cria√ß√£o de perfis
VBSolution - Sistema CRM Completo
"""

import requests
import json
from datetime import datetime

# Configura√ß√µes do Supabase
SUPABASE_URL = "https://nrbsocawokmihvxfcpso.supabase.co"
SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5yYnNvY2F3b2ttaWh2eGZjcHNvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTY0NzQwNTMsImV4cCI6MjA3MjA1MDA1M30.3SxEVRNNBHhAXgJ7S2BMHm1QWq9kxYamuLjvZm0_OU0"

# Headers para as requisi√ß√µes
headers = {
    'apikey': SUPABASE_ANON_KEY,
    'Authorization': f'Bearer {SUPABASE_ANON_KEY}',
    'Content-Type': 'application/json',
    'Prefer': 'return=minimal'
}

def log(message, level="INFO"):
    """Fun√ß√£o para logging com timestamp"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"[{timestamp}] {level}: {message}")

def test_profiles_table():
    """Testar se a tabela profiles est√° funcionando"""
    try:
        log("üîç Testando tabela profiles...")
        
        # Tentar acessar a tabela profiles
        response = requests.get(f"{SUPABASE_URL}/rest/v1/profiles?select=*&limit=1", headers=headers)
        
        if response.status_code == 200:
            log("‚úÖ Tabela profiles est√° acess√≠vel")
            data = response.json()
            log(f"üìä Dados retornados: {len(data)} registros")
            return True
        else:
            log(f"‚ùå Erro ao acessar profiles: {response.status_code} - {response.text}", "ERROR")
            return False
            
    except Exception as e:
        log(f"‚ùå Erro ao testar profiles: {str(e)}", "ERROR")
        return False

def test_auth_endpoint():
    """Testar se o endpoint de autentica√ß√£o est√° funcionando"""
    try:
        log("üîê Testando endpoint de autentica√ß√£o...")
        
        # Testar o endpoint de signup (deve retornar erro de dados inv√°lidos, mas n√£o erro de conex√£o)
        auth_data = {
            "email": "teste@teste.com",
            "password": "123456"
        }
        
        response = requests.post(f"{SUPABASE_URL}/auth/v1/signup", 
                               headers=headers, 
                               json=auth_data)
        
        # Qualquer resposta indica que o endpoint est√° funcionando
        log(f"‚úÖ Endpoint de autentica√ß√£o respondeu: {response.status_code}")
        return True
        
    except Exception as e:
        log(f"‚ùå Erro ao testar autentica√ß√£o: {str(e)}", "ERROR")
        return False

def test_table_structure():
    """Testar a estrutura das tabelas principais"""
    try:
        log("üèóÔ∏è Testando estrutura das tabelas...")
        
        tables_to_test = [
            'profiles',
            'companies', 
            'activities'
        ]
        
        for table in tables_to_test:
            try:
                response = requests.get(f"{SUPABASE_URL}/rest/v1/{table}?select=*&limit=1", headers=headers)
                
                if response.status_code == 200:
                    log(f"‚úÖ Tabela {table} est√° acess√≠vel")
                else:
                    log(f"‚ö†Ô∏è Tabela {table} retornou status {response.status_code}", "WARNING")
                    
            except Exception as e:
                log(f"‚ùå Erro ao testar tabela {table}: {str(e)}", "ERROR")
        
        return True
        
    except Exception as e:
        log(f"‚ùå Erro ao testar estrutura das tabelas: {str(e)}", "ERROR")
        return False

def check_rls_policies():
    """Verificar se as pol√≠ticas RLS est√£o funcionando"""
    try:
        log("üîí Verificando pol√≠ticas RLS...")
        
        # Tentar acessar dados sem autentica√ß√£o (deve falhar com RLS ativo)
        response = requests.get(f"{SUPABASE_URL}/rest/v1/profiles", headers=headers)
        
        if response.status_code in [401, 403]:
            log("‚úÖ Pol√≠ticas RLS est√£o ativas (acesso negado sem autentica√ß√£o)")
            return True
        elif response.status_code == 200:
            log("‚ö†Ô∏è Pol√≠ticas RLS podem n√£o estar ativas (dados acess√≠veis sem autentica√ß√£o)", "WARNING")
            return False
        else:
            log(f"‚ö†Ô∏è Status inesperado ao testar RLS: {response.status_code}", "WARNING")
            return False
            
    except Exception as e:
        log(f"‚ùå Erro ao testar RLS: {str(e)}", "ERROR")
        return False

def test_manual_profile_creation():
    """Testar cria√ß√£o manual de perfil (simula√ß√£o)"""
    try:
        log("üìù Testando cria√ß√£o manual de perfil...")
        
        # Dados de teste
        test_profile = {
            "id": "00000000-0000-0000-0000-000000000000",  # UUID inv√°lido para teste
            "email": "teste@teste.com",
            "name": "Usu√°rio Teste",
            "company": "Empresa Teste"
        }
        
        # Tentar inserir (deve falhar por UUID inv√°lido, mas testa a estrutura)
        response = requests.post(f"{SUPABASE_URL}/rest/v1/profiles", 
                               headers=headers, 
                               json=test_profile)
        
        if response.status_code in [400, 422]:  # Erro esperado por UUID inv√°lido
            log("‚úÖ Estrutura da tabela profiles est√° correta (erro esperado por UUID inv√°lido)")
            return True
        else:
            log(f"‚ö†Ô∏è Status inesperado: {response.status_code}", "WARNING")
            return False
            
    except Exception as e:
        log(f"‚ùå Erro ao testar cria√ß√£o manual: {str(e)}", "ERROR")
        return False

def main():
    """Fun√ß√£o principal"""
    log("üß™ INICIANDO TESTES DE AUTENTICA√á√ÉO E PERFIS")
    log("=" * 60)
    
    # Testar tabela profiles
    profiles_ok = test_profiles_table()
    
    # Testar endpoint de autentica√ß√£o
    auth_ok = test_auth_endpoint()
    
    # Testar estrutura das tabelas
    structure_ok = test_table_structure()
    
    # Verificar RLS
    rls_ok = check_rls_policies()
    
    # Testar cria√ß√£o manual de perfil
    manual_ok = test_manual_profile_creation()
    
    # Resumo dos testes
    log("=" * 60)
    log("üìä RESUMO DOS TESTES DE AUTENTICA√á√ÉO:")
    log(f"üìã Tabela profiles: {'‚úÖ OK' if profiles_ok else '‚ùå FALHOU'}")
    log(f"üîê Endpoint auth: {'‚úÖ OK' if auth_ok else '‚ùå FALHOU'}")
    log(f"üèóÔ∏è Estrutura: {'‚úÖ OK' if structure_ok else '‚ö†Ô∏è ATEN√á√ÉO'}")
    log(f"üîí RLS: {'‚úÖ OK' if rls_ok else '‚ö†Ô∏è ATEN√á√ÉO'}")
    log(f"üìù Cria√ß√£o manual: {'‚úÖ OK' if manual_ok else '‚ö†Ô∏è ATEN√á√ÉO'}")
    
    if profiles_ok and auth_ok:
        log("üéâ SISTEMA DE AUTENTICA√á√ÉO FUNCIONANDO!")
        log("=" * 60)
        log("üîß PROBLEMA IDENTIFICADO:")
        log("O trigger autom√°tico pode n√£o estar funcionando")
        log("Execute o script fix_auth_trigger.sql no Supabase")
        log("=" * 60)
        return True
    else:
        log("‚ö†Ô∏è PROBLEMAS NO SISTEMA DE AUTENTICA√á√ÉO")
        log("=" * 60)
        log("üîß SOLU√á√ïES:")
        log("1. Execute fix_auth_trigger.sql no Supabase")
        log("2. Verifique se a tabela profiles foi criada")
        log("3. Verifique as permiss√µes e pol√≠ticas RLS")
        log("=" * 60)
        return False

if __name__ == "__main__":
    try:
        success = main()
        exit(0 if success else 1)
    except KeyboardInterrupt:
        log("\n‚ö†Ô∏è Testes interrompidos pelo usu√°rio", "WARNING")
        exit(1)
    except Exception as e:
        log(f"\n‚ùå Erro inesperado: {str(e)}", "ERROR")
        exit(1)
