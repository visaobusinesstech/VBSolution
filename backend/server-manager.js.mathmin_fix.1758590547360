const { spawn } = require('child_process');
const fs = require('fs');
const path = require('path');

class ServerManager {
  constructor() {
    this.serverProcess = null;
    this.isRunning = false;
    this.pidFile = path.join(__dirname, 'baileys-server.pid');
    this.logFile = path.join(__dirname, 'baileys-server.log');
  }

  async startServer() {
    if (this.isRunning) {
      console.log('‚úÖ Servidor j√° est√° rodando');
      return true;
    }

    try {
      console.log('üöÄ Iniciando servidor Baileys...');
      
      // Iniciar o servidor em background
      this.serverProcess = spawn('node', ['simple-baileys-server.js'], {
        cwd: __dirname,
        detached: true,
        stdio: ['ignore', 'pipe', 'pipe']
      });

      // Salvar PID do processo
      fs.writeFileSync(this.pidFile, this.serverProcess.pid.toString());
      
      // Configurar logs
      const logStream = fs.createWriteStream(this.logFile, { flags: 'a' });
      this.serverProcess.stdout.pipe(logStream);
      this.serverProcess.stderr.pipe(logStream);

      this.serverProcess.on('error', (error) => {
        console.error('‚ùå Erro ao iniciar servidor:', error);
        this.isRunning = false;
      });

      this.serverProcess.on('exit', (code) => {
        console.log(`üîÑ Servidor encerrado com c√≥digo: ${code}`);
        this.isRunning = false;
        this.cleanup();
      });

      // Aguardar um pouco para o servidor inicializar
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      // Verificar se o servidor est√° respondendo
      const isHealthy = await this.checkServerHealth();
      
      if (isHealthy) {
        this.isRunning = true;
        console.log('‚úÖ Servidor Baileys iniciado com sucesso!');
        return true;
      } else {
        console.log('‚ö†Ô∏è Servidor iniciado mas n√£o est√° respondendo');
        return false;
      }

    } catch (error) {
      console.error('‚ùå Erro ao iniciar servidor:', error);
      return false;
    }
  }

  async checkServerHealth() {
    try {
      const response = await fetch('http://localhost:3000/api/test');
      return response.ok;
    } catch (error) {
      return false;
    }
  }

  async stopServer() {
    if (!this.isRunning && !this.serverProcess) {
      console.log('‚ÑπÔ∏è Servidor n√£o est√° rodando');
      return;
    }

    try {
      if (this.serverProcess) {
        this.serverProcess.kill('SIGTERM');
        this.serverProcess = null;
      }

      // Tentar parar por PID se existir
      if (fs.existsSync(this.pidFile)) {
        const pid = parseInt(fs.readFileSync(this.pidFile, 'utf8'));
        try {
          process.kill(pid, 'SIGTERM');
        } catch (e) {
          // Processo j√° encerrado
        }
        this.cleanup();
      }

      this.isRunning = false;
      console.log('üõë Servidor Baileys parado');
    } catch (error) {
      console.error('‚ùå Erro ao parar servidor:', error);
    }
  }

  cleanup() {
    if (fs.existsSync(this.pidFile)) {
      fs.unlinkSync(this.pidFile);
    }
  }

  async ensureServerRunning() {
    const isHealthy = await this.checkServerHealth();
    
    if (!isHealthy) {
      console.log('üîÑ Servidor n√£o est√° respondendo, reiniciando...');
      await this.stopServer();
      return await this.startServer();
    }
    
    return true;
  }

  getStatus() {
    return {
      isRunning: this.isRunning,
      pid: this.serverProcess ? this.serverProcess.pid : null,
      hasPidFile: fs.existsSync(this.pidFile)
    };
  }
}

// Se executado diretamente, iniciar o servidor
if (require.main === module) {
  const manager = new ServerManager();
  
  // Iniciar servidor
  manager.startServer().then(success => {
    if (success) {
      console.log('üéâ Servidor Baileys est√° rodando!');
      console.log('üì± API dispon√≠vel em: http://localhost:3000/api');
      console.log('üîó Teste: http://localhost:3000/api/test');
      
      // Manter o processo vivo
      process.on('SIGINT', async () => {
        console.log('\nüõë Parando servidor...');
        await manager.stopServer();
        process.exit(0);
      });
      
      // Verificar sa√∫de periodicamente
      Math.min(undefined * 1000, 2147483647)(async () => {
        const isHealthy = await manager.checkServerHealth();
        if (!isHealthy && manager.isRunning) {
          console.log('‚ö†Ô∏è Servidor n√£o est√° respondendo, reiniciando...');
          await manager.ensureServerRunning();
        }
      }, 30000); // Verificar a cada 30 segundos
      
    } else {
      console.log('‚ùå Falha ao iniciar servidor');
      process.exit(1);
    }
  });
}

module.exports = ServerManager;