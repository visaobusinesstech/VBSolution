// Script de teste para verificar a cria√ß√£o de atividades
// Execute este script no console do navegador na p√°gina de atividades

console.log('üß™ Iniciando teste de cria√ß√£o de atividades...');

// Fun√ß√£o para testar a cria√ß√£o de uma atividade
async function testCreateActivity() {
  try {
    console.log('üìù Testando cria√ß√£o de atividade...');
    
    // Simular dados de uma atividade
    const testActivityData = {
      title: 'Teste de Atividade - ' + new Date().toLocaleString(),
      description: 'Esta √© uma atividade de teste criada automaticamente',
      type: 'task',
      priority: 'medium',
      status: 'todo'
    };
    
    console.log('üìã Dados da atividade:', testActivityData);
    
    // Verificar se o hook useActivities est√° dispon√≠vel
    if (typeof window !== 'undefined' && window.React) {
      console.log('‚úÖ React est√° dispon√≠vel');
    } else {
      console.log('‚ùå React n√£o est√° dispon√≠vel');
      return;
    }
    
    // Verificar se o Supabase est√° dispon√≠vel
    if (typeof window !== 'undefined' && window.supabase) {
      console.log('‚úÖ Supabase est√° dispon√≠vel');
    } else {
      console.log('‚ùå Supabase n√£o est√° dispon√≠vel');
      return;
    }
    
    console.log('‚úÖ Teste de cria√ß√£o de atividade conclu√≠do');
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
  }
}

// Fun√ß√£o para verificar a estrutura da tabela activities
async function checkActivitiesTable() {
  try {
    console.log('üîç Verificando estrutura da tabela activities...');
    
    if (typeof window !== 'undefined' && window.supabase) {
      const { data, error } = await window.supabase
        .from('activities')
        .select('*')
        .limit(1);
      
      if (error) {
        console.error('‚ùå Erro ao verificar tabela:', error);
      } else {
        console.log('‚úÖ Tabela activities acess√≠vel');
        console.log('üìä Estrutura da tabela:', data);
      }
    }
  } catch (error) {
    console.error('‚ùå Erro ao verificar tabela:', error);
  }
}

// Fun√ß√£o para verificar as colunas do Kanban
function checkKanbanColumns() {
  try {
    console.log('üéØ Verificando colunas do Kanban...');
    
    const savedColumns = localStorage.getItem('kanbanColumns');
    if (savedColumns) {
      const columns = JSON.parse(savedColumns);
      console.log('‚úÖ Colunas do Kanban carregadas:', columns);
      
      // Verificar se as colunas t√™m os status corretos
      const expectedStatuses = ['todo', 'doing', 'done'];
      const columnStatuses = columns.map(col => col.status);
      
      const hasCorrectStatuses = expectedStatuses.every(status => 
        columnStatuses.includes(status)
      );
      
      if (hasCorrectStatuses) {
        console.log('‚úÖ Colunas do Kanban t√™m os status corretos');
      } else {
        console.log('‚ö†Ô∏è Colunas do Kanban podem ter status incorretos');
        console.log('Status esperados:', expectedStatuses);
        console.log('Status encontrados:', columnStatuses);
      }
    } else {
      console.log('‚ö†Ô∏è Nenhuma configura√ß√£o de Kanban salva encontrada');
    }
  } catch (error) {
    console.error('‚ùå Erro ao verificar colunas do Kanban:', error);
  }
}

// Executar todos os testes
async function runAllTests() {
  console.log('üöÄ Executando todos os testes...');
  
  await checkActivitiesTable();
  checkKanbanColumns();
  await testCreateActivity();
  
  console.log('‚úÖ Todos os testes conclu√≠dos!');
}

// Executar testes automaticamente
runAllTests();

// Exportar fun√ß√µes para uso manual
window.testActivities = {
  testCreateActivity,
  checkActivitiesTable,
  checkKanbanColumns,
  runAllTests
};

console.log('üí° Fun√ß√µes de teste dispon√≠veis em window.testActivities');
