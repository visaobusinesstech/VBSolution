// Script final para testar se a solu√ß√£o funcionou
import { createClient } from '@supabase/supabase-js';

const SUPABASE_URL = "https://nrbsocawokmihvxfcpso.supabase.co";
const SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5yYnNvY2F3b2ttaWh2eGZjcHNvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTY0NzQwNTMsImV4cCI6MjA3MjA1MDA1M30.3SxEVRNNBHhAXgJ7S2BMHm1QWq9kxYamuLjvZm0_OU0";

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

async function testDatabaseOperations() {
  console.log('üß™ Testando opera√ß√µes do banco de dados...\n');
  
  const companyId = '11111111-1111-1111-1111-111111111111';
  
  // 1. Testar cria√ß√£o de √°rea
  console.log('1Ô∏è‚É£ Testando cria√ß√£o de √°rea...');
  try {
    const { data: areaData, error: areaError } = await supabase
      .from('company_areas')
      .insert([{
        company_id: companyId,
        name: '√Årea de Teste Final',
        description: 'Teste ap√≥s corre√ß√£o do RLS'
      }])
      .select()
      .single();
    
    if (areaError) {
      console.log('‚ùå Erro ao criar √°rea:', areaError.message);
    } else {
      console.log('‚úÖ √Årea criada com sucesso:', areaData.name);
    }
  } catch (err) {
    console.log('‚ùå Erro geral ao criar √°rea:', err.message);
  }
  
  // 2. Testar cria√ß√£o de cargo
  console.log('\n2Ô∏è‚É£ Testando cria√ß√£o de cargo...');
  try {
    const { data: roleData, error: roleError } = await supabase
      .from('company_roles')
      .insert([{
        company_id: companyId,
        name: 'Cargo de Teste Final',
        description: 'Teste ap√≥s corre√ß√£o do RLS',
        permissions: {
          view_dashboard: true,
          create_tasks: true
        }
      }])
      .select()
      .single();
    
    if (roleError) {
      console.log('‚ùå Erro ao criar cargo:', roleError.message);
    } else {
      console.log('‚úÖ Cargo criado com sucesso:', roleData.name);
    }
  } catch (err) {
    console.log('‚ùå Erro geral ao criar cargo:', err.message);
  }
  
  // 3. Testar cria√ß√£o de usu√°rio
  console.log('\n3Ô∏è‚É£ Testando cria√ß√£o de usu√°rio...');
  try {
    const { data: userData, error: userError } = await supabase
      .from('company_users')
      .insert([{
        company_id: companyId,
        full_name: 'Usu√°rio Teste Final',
        email: 'testefinal@empresa.com',
        password_hash: 'hash123',
        status: 'active'
      }])
      .select()
      .single();
    
    if (userError) {
      console.log('‚ùå Erro ao criar usu√°rio:', userError.message);
    } else {
      console.log('‚úÖ Usu√°rio criado com sucesso:', userData.full_name);
    }
  } catch (err) {
    console.log('‚ùå Erro geral ao criar usu√°rio:', err.message);
  }
  
  // 4. Testar busca de dados
  console.log('\n4Ô∏è‚É£ Testando busca de dados...');
  try {
    const { data: areas, error: areasError } = await supabase
      .from('company_areas')
      .select('*')
      .eq('company_id', companyId);
    
    if (areasError) {
      console.log('‚ùå Erro ao buscar √°reas:', areasError.message);
    } else {
      console.log('‚úÖ √Åreas encontradas:', areas?.length || 0);
      areas?.forEach(area => {
        console.log(`   - ${area.name} (${area.id})`);
      });
    }
  } catch (err) {
    console.log('‚ùå Erro geral ao buscar √°reas:', err.message);
  }
}

async function checkExistingData() {
  console.log('üîç Verificando dados existentes...\n');
  
  try {
    // Verificar empresas
    const { data: companies, error: companiesError } = await supabase
      .from('companies')
      .select('id, fantasy_name');
    
    if (companiesError) {
      console.log('‚ùå Erro ao buscar empresas:', companiesError.message);
    } else {
      console.log('üìä Empresas encontradas:', companies?.length || 0);
      companies?.forEach(company => {
        console.log(`   - ${company.fantasy_name} (${company.id})`);
      });
    }
    
  } catch (err) {
    console.log('‚ùå Erro ao verificar dados:', err.message);
  }
}

async function main() {
  console.log('üöÄ TESTE FINAL DA SOLU√á√ÉO\n');
  console.log('Este script testa se as opera√ß√µes do banco funcionam ap√≥s a corre√ß√£o.\n');
  
  await checkExistingData();
  console.log('\n' + '='.repeat(50) + '\n');
  await testDatabaseOperations();
  
  console.log('\n' + '='.repeat(50));
  console.log('‚úÖ TESTE CONCLU√çDO!');
  console.log('\nSe voc√™ viu mensagens de sucesso acima,');
  console.log('o sistema de configura√ß√µes deve funcionar agora!');
  console.log('\nTeste criando uma √°rea na p√°gina /settings ‚Üí Estrutura');
}

main().catch(console.error);
