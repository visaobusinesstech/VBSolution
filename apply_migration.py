#!/usr/bin/env python3
"""
Script para aplicar automaticamente a migra√ß√£o do VBSolution no Supabase
Este script reconstr√≥i todo o sistema com isolamento completo por usu√°rio
"""

import os
import sys
import requests
import json
from pathlib import Path

# Configura√ß√µes do Supabase
SUPABASE_URL = "https://zqlwthtkjhmjydkeghfh.supabase.co"
SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpxbHd0aHRramhtanlka2VnaGZoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTUzOTUxMTksImV4cCI6MjA3MDk3MTExOX0.iDAzEjWRHjETngE-elo2zVdgaRmsIWoKDY12OT_O4NY"

def read_migration_file():
    """L√™ o arquivo de migra√ß√£o"""
    migration_path = Path("supabase/migrations/20250801120000_complete_system_restructure.sql")
    
    if not migration_path.exists():
        print(f"‚ùå Arquivo de migra√ß√£o n√£o encontrado: {migration_path}")
        sys.exit(1)
    
    with open(migration_path, 'r', encoding='utf-8') as f:
        return f.read()

def apply_migration_supabase():
    """Aplica a migra√ß√£o via Supabase REST API"""
    print("üöÄ Iniciando aplica√ß√£o da migra√ß√£o no Supabase...")
    
    # Ler arquivo de migra√ß√£o
    migration_sql = read_migration_file()
    
    # Headers para a requisi√ß√£o
    headers = {
        'Content-Type': 'application/json',
        'apikey': SUPABASE_ANON_KEY,
        'Authorization': f'Bearer {SUPABASE_ANON_KEY}'
    }
    
    # Dados da requisi√ß√£o
    data = {
        'query': migration_sql
    }
    
    try:
        print("üì° Enviando migra√ß√£o para o Supabase...")
        
        # Fazer requisi√ß√£o para executar SQL
        response = requests.post(
            f"{SUPABASE_URL}/rest/v1/rpc/exec_sql",
            headers=headers,
            json=data,
            timeout=300  # 5 minutos de timeout
        )
        
        if response.status_code == 200:
            print("‚úÖ Migra√ß√£o aplicada com sucesso!")
            print("üìä Verificando resultado...")
            return True
        else:
            print(f"‚ùå Erro ao aplicar migra√ß√£o: {response.status_code}")
            print(f"Resposta: {response.text}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erro de conex√£o: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        return False

def verify_migration():
    """Verifica se a migra√ß√£o foi aplicada corretamente"""
    print("üîç Verificando resultado da migra√ß√£o...")
    
    # Headers para verifica√ß√£o
    headers = {
        'apikey': SUPABASE_ANON_KEY,
        'Authorization': f'Bearer {SUPABASE_ANON_KEY}'
    }
    
    try:
        # Verificar tabelas criadas
        response = requests.get(
            f"{SUPABASE_URL}/rest/v1/rpc/get_tables",
            headers=headers
        )
        
        if response.status_code == 200:
            tables = response.json()
            print(f"‚úÖ Tabelas criadas: {len(tables)}")
            for table in tables:
                print(f"   - {table['tablename']}")
        else:
            print("‚ö†Ô∏è N√£o foi poss√≠vel verificar as tabelas")
            
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao verificar migra√ß√£o: {e}")

def main():
    """Fun√ß√£o principal"""
    print("=" * 60)
    print("üîí VBSOLUTION - RECONSTRU√á√ÉO COMPLETA DO SISTEMA")
    print("=" * 60)
    print()
    print("üìã Este script ir√°:")
    print("   1. Remover tabelas antigas e in√∫teis")
    print("   2. Criar estrutura completa do sistema")
    print("   3. Implementar isolamento total por usu√°rio")
    print("   4. Configurar todas as pol√≠ticas de seguran√ßa")
    print()
    
    # Confirmar execu√ß√£o
    confirm = input("‚ö†Ô∏è  ATEN√á√ÉO: Esta opera√ß√£o ir√° recriar todo o banco de dados. Continuar? (s/N): ")
    
    if confirm.lower() not in ['s', 'sim', 'y', 'yes']:
        print("‚ùå Opera√ß√£o cancelada pelo usu√°rio")
        sys.exit(0)
    
    print()
    print("üöÄ Iniciando processo...")
    print()
    
    # Aplicar migra√ß√£o
    success = apply_migration_supabase()
    
    if success:
        print()
        print("‚úÖ MIGRA√á√ÉO APLICADA COM SUCESSO!")
        print()
        print("üéØ O que foi implementado:")
        print("   ‚úÖ Sistema completo com 20+ tabelas")
        print("   ‚úÖ Isolamento total por usu√°rio")
        print("   ‚úÖ Pol√≠ticas de seguran√ßa em todas as tabelas")
        print("   ‚úÖ √çndices para performance")
        print("   ‚úÖ Triggers autom√°ticos")
        print("   ‚úÖ Estrutura para todas as p√°ginas do sistema")
        print()
        print("üîí SEGURAN√áA GARANTIDA:")
        print("   - Cada usu√°rio s√≥ v√™ seus pr√≥prios dados")
        print("   - Atividades isoladas por usu√°rio")
        print("   - Projetos isolados por usu√°rio")
        print("   - Empresas isoladas por usu√°rio")
        print("   - Nenhum vazamento de dados entre contas")
        print()
        print("üì± P√ÅGINAS SUPORTADAS:")
        print("   - Dashboard (Index) - Blocos personaliz√°veis")
        print("   - Activities - Tarefas e atividades")
        print("   - Projects - Gerenciamento de projetos")
        print("   - Companies - Cadastro de empresas")
        print("   - Employees - Funcion√°rios")
        print("   - Inventory - Controle de estoque")
        print("   - Products - Produtos e servi√ßos")
        print("   - Leads & Sales - Funil de vendas")
        print("   - Work Groups - Grupos de trabalho")
        print("   - Calendar - Eventos e calend√°rio")
        print("   - Files - Gerenciamento de arquivos")
        print("   - Chat - Sistema de mensagens")
        print("   - Settings - Configura√ß√µes")
        print("   - Reports - Relat√≥rios")
        print()
        print("üéâ SISTEMA PRONTO PARA USO!")
        print("   Agora cada usu√°rio tem total autonomia e isolamento de dados!")
        
        # Verificar resultado
        verify_migration()
        
    else:
        print()
        print("‚ùå FALHA NA MIGRA√á√ÉO!")
        print("   Verifique os logs acima e tente novamente")
        print("   Ou execute manualmente no SQL Editor do Supabase")
        sys.exit(1)

if __name__ == "__main__":
    main()
