// Script espec√≠fico para debugar o erro "Falha ao aplicar tema"
// Execute este script no console do navegador

console.log('üîç Debug espec√≠fico: Erro "Falha ao aplicar tema"');

// Fun√ß√£o para testar se o Supabase est√° funcionando
async function testSupabaseConnection() {
  console.log('üì° Testando conex√£o com Supabase...');
  
  try {
    const { data, error } = await supabase
      .from('company_settings')
      .select('id')
      .limit(1);
    
    if (error) {
      console.error('‚ùå Erro de conex√£o com Supabase:', error);
      return false;
    }
    
    console.log('‚úÖ Conex√£o com Supabase funcionando');
    return true;
  } catch (err) {
    console.error('‚ùå Erro ao conectar com Supabase:', err);
    return false;
  }
}

// Fun√ß√£o para verificar se as colunas existem
async function checkThemeColumns() {
  console.log('üîç Verificando colunas de tema...');
  
  try {
    const { data, error } = await supabase
      .from('company_settings')
      .select('sidebar_color, topbar_color, button_color')
      .limit(1);
    
    if (error) {
      console.error('‚ùå Erro ao verificar colunas:', error);
      console.error('Detalhes do erro:', error.message);
      console.error('C√≥digo do erro:', error.code);
      console.error('Detalhes adicionais:', error.details);
      return false;
    }
    
    console.log('‚úÖ Colunas de tema existem no banco');
    console.log('Colunas encontradas:', Object.keys(data[0] || {}));
    return true;
  } catch (err) {
    console.error('‚ùå Erro ao verificar colunas:', err);
    return false;
  }
}

// Fun√ß√£o para testar salvamento com dados m√≠nimos
async function testMinimalSave() {
  console.log('üíæ Testando salvamento com dados m√≠nimos...');
  
  try {
    // Buscar usu√°rio atual
    const { data: user } = await supabase.auth.getUser();
    if (!user.user) {
      console.error('‚ùå Usu√°rio n√£o logado');
      return false;
    }
    
    const userId = user.user.id;
    console.log('üë§ User ID:', userId);
    
    // Dados m√≠nimos para teste
    const testData = {
      company_id: '11111111-1111-1111-1111-111111111111',
      company_name: 'Teste Empresa',
      sidebar_color: '#ff0000',
      topbar_color: '#00ff00',
      button_color: '#0000ff'
    };
    
    console.log('üìù Dados de teste:', testData);
    
    // Tentar inserir
    const { data, error } = await supabase
      .from('company_settings')
      .upsert(testData)
      .select();
    
    if (error) {
      console.error('‚ùå Erro ao salvar dados m√≠nimos:', error);
      console.error('Detalhes do erro:', error.message);
      console.error('C√≥digo do erro:', error.code);
      console.error('Detalhes adicionais:', error.details);
      console.error('Hint:', error.hint);
      return false;
    }
    
    console.log('‚úÖ Salvamento com dados m√≠nimos funcionou');
    console.log('Dados salvos:', data);
    return true;
  } catch (err) {
    console.error('‚ùå Erro no teste de salvamento:', err);
    return false;
  }
}

// Fun√ß√£o para simular exatamente o que a interface faz
async function testInterfaceSave() {
  console.log('üé® Testando salvamento como a interface faz...');
  
  try {
    // Buscar usu√°rio atual
    const { data: user } = await supabase.auth.getUser();
    if (!user.user) {
      console.error('‚ùå Usu√°rio n√£o logado');
      return false;
    }
    
    const userId = user.user.id;
    
    // Buscar company_id como a interface faz
    let companyId = null;
    
    const { data: userProfile, error: profileError } = await supabase
      .from('user_profiles')
      .select('company_id')
      .eq('id', userId)
      .single();
    
    if (profileError && profileError.code !== 'PGRST116') {
      console.error('‚ùå Erro ao buscar perfil:', profileError);
    }
    
    companyId = userProfile?.company_id;
    console.log('üè¢ Company ID do perfil:', companyId);
    
    if (!companyId) {
      const { data: companyUser, error: companyUserError } = await supabase
        .from('company_users')
        .select('company_id')
        .eq('id', userId)
        .single();
      
      if (!companyUserError && companyUser?.company_id) {
        companyId = companyUser.company_id;
      }
    }
    
    if (!companyId) {
      companyId = '11111111-1111-1111-1111-111111111111';
      console.log('üè¢ Usando company_id padr√£o:', companyId);
    }
    
    // Dados como a interface envia
    const themeColors = {
      sidebar_color: '#ff6b6b',
      topbar_color: '#4ecdc4',
      button_color: '#45b7d1'
    };
    
    const settingsToSave = {
      company_name: 'Empresa Teste Interface',
      ...themeColors,
      company_id: companyId,
      updated_at: new Date().toISOString()
    };
    
    console.log('üìù Dados preparados para salvar:', settingsToSave);
    
    // Verificar se j√° existe
    const { data: existingSettings } = await supabase
      .from('company_settings')
      .select('id')
      .eq('company_id', companyId)
      .single();
    
    console.log('üîç Configura√ß√£o existente:', existingSettings);
    
    let result;
    if (existingSettings) {
      console.log('üîÑ Atualizando configura√ß√£o existente...');
      result = await supabase
        .from('company_settings')
        .update(settingsToSave)
        .eq('id', existingSettings.id)
        .select()
        .single();
    } else {
      console.log('‚ûï Criando nova configura√ß√£o...');
      result = await supabase
        .from('company_settings')
        .insert([settingsToSave])
        .select()
        .single();
    }
    
    console.log('üìä Resultado da opera√ß√£o:', result);
    
    if (result.error) {
      console.error('‚ùå Erro na opera√ß√£o:', result.error);
      console.error('Detalhes do erro:', result.error.message);
      console.error('C√≥digo do erro:', result.error.code);
      console.error('Detalhes adicionais:', result.error.details);
      console.error('Hint:', result.error.hint);
      return false;
    }
    
    console.log('‚úÖ Salvamento da interface funcionou');
    console.log('Dados salvos:', result.data);
    return true;
  } catch (err) {
    console.error('‚ùå Erro no teste da interface:', err);
    return false;
  }
}

// Fun√ß√£o para verificar permiss√µes RLS
async function checkRLSPermissions() {
  console.log('üîê Verificando permiss√µes RLS...');
  
  try {
    // Tentar ler dados
    const { data: readData, error: readError } = await supabase
      .from('company_settings')
      .select('*')
      .limit(1);
    
    if (readError) {
      console.error('‚ùå Erro de leitura (RLS):', readError);
      return false;
    }
    
    console.log('‚úÖ Permiss√£o de leitura OK');
    
    // Tentar inserir dados de teste
    const testData = {
      company_id: '11111111-1111-1111-1111-111111111111',
      company_name: 'Teste RLS',
      sidebar_color: '#test',
      topbar_color: '#test',
      button_color: '#test'
    };
    
    const { data: insertData, error: insertError } = await supabase
      .from('company_settings')
      .insert([testData])
      .select();
    
    if (insertError) {
      console.error('‚ùå Erro de inser√ß√£o (RLS):', insertError);
      return false;
    }
    
    console.log('‚úÖ Permiss√£o de inser√ß√£o OK');
    
    // Limpar dados de teste
    if (insertData && insertData[0]) {
      await supabase
        .from('company_settings')
        .delete()
        .eq('id', insertData[0].id);
    }
    
    return true;
  } catch (err) {
    console.error('‚ùå Erro ao verificar permiss√µes:', err);
    return false;
  }
}

// Fun√ß√£o principal de debug
async function runSpecificDebug() {
  console.log('üöÄ Iniciando debug espec√≠fico do erro...');
  
  // Teste 1: Conex√£o com Supabase
  console.log('\n1Ô∏è‚É£ Testando conex√£o com Supabase:');
  const connectionOK = await testSupabaseConnection();
  
  // Teste 2: Verificar colunas
  console.log('\n2Ô∏è‚É£ Verificando colunas de tema:');
  const columnsOK = await checkThemeColumns();
  
  // Teste 3: Verificar permiss√µes RLS
  console.log('\n3Ô∏è‚É£ Verificando permiss√µes RLS:');
  const permissionsOK = await checkRLSPermissions();
  
  // Teste 4: Salvamento m√≠nimo
  console.log('\n4Ô∏è‚É£ Testando salvamento m√≠nimo:');
  const minimalOK = await testMinimalSave();
  
  // Teste 5: Salvamento como interface
  console.log('\n5Ô∏è‚É£ Testando salvamento como interface:');
  const interfaceOK = await testInterfaceSave();
  
  console.log('\nüìä RESUMO DOS TESTES:');
  console.log('Conex√£o Supabase:', connectionOK ? '‚úÖ' : '‚ùå');
  console.log('Colunas de tema:', columnsOK ? '‚úÖ' : '‚ùå');
  console.log('Permiss√µes RLS:', permissionsOK ? '‚úÖ' : '‚ùå');
  console.log('Salvamento m√≠nimo:', minimalOK ? '‚úÖ' : '‚ùå');
  console.log('Salvamento interface:', interfaceOK ? '‚úÖ' : '‚ùå');
  
  if (!connectionOK) {
    console.log('‚ùå PROBLEMA: N√£o consegue conectar com Supabase');
  } else if (!columnsOK) {
    console.log('‚ùå PROBLEMA: Colunas de tema n√£o existem. Execute fix_theme_columns_migration.sql');
  } else if (!permissionsOK) {
    console.log('‚ùå PROBLEMA: Permiss√µes RLS bloqueando opera√ß√µes');
  } else if (!minimalOK) {
    console.log('‚ùå PROBLEMA: Erro no salvamento b√°sico');
  } else if (!interfaceOK) {
    console.log('‚ùå PROBLEMA: Erro no salvamento da interface');
  } else {
    console.log('‚úÖ Todos os testes passaram. O problema pode estar na interface.');
  }
}

// Executar debug
runSpecificDebug();

// Exportar fun√ß√µes
window.debugThemeError = {
  testSupabaseConnection,
  checkThemeColumns,
  testMinimalSave,
  testInterfaceSave,
  checkRLSPermissions,
  runSpecificDebug
};

console.log('üîß Fun√ß√µes de debug dispon√≠veis em window.debugThemeError');
