// Script de teste espec√≠fico para o drag and drop no React
// Execute no console do navegador na p√°gina de atividades

console.log('üß™ [REACT TEST] Iniciando teste de drag and drop React...');

// Fun√ß√£o para verificar se o React est√° renderizando corretamente
function checkReactRendering() {
  console.log('üîç [REACT TEST] Verificando renderiza√ß√£o do React...');
  
  // Verificar se h√° elementos do ClickUpKanban
  const kanbanContainer = document.querySelector('.flex.gap-6') || 
                         document.querySelector('[class*="ClickUpKanban"]');
  
  if (!kanbanContainer) {
    console.error('‚ùå [REACT TEST] Container do Kanban n√£o encontrado');
    return false;
  }
  
  console.log('‚úÖ [REACT TEST] Container do Kanban encontrado:', kanbanContainer);
  
  // Verificar se h√° colunas
  const columns = kanbanContainer.querySelectorAll('[style*="width: 280px"]');
  console.log(`üìã [REACT TEST] Colunas encontradas: ${columns.length}`);
  
  // Verificar se h√° cards de tarefas
  const taskCards = kanbanContainer.querySelectorAll('[draggable="true"]');
  console.log(`üéØ [REACT TEST] Cards de tarefas encontrados: ${taskCards.length}`);
  
  // Verificar se os eventos est√£o sendo anexados
  const hasDragStart = Array.from(taskCards).some(card => 
    card.ondragstart !== null || card.getAttribute('ondragstart') !== null
  );
  
  console.log(`üîß [REACT TEST] Eventos dragstart anexados: ${hasDragStart}`);
  
  return {
    container: kanbanContainer,
    columns: columns.length,
    taskCards: taskCards.length,
    hasDragStart
  };
}

// Fun√ß√£o para verificar se os dados est√£o sendo passados corretamente
function checkDataFlow() {
  console.log('üìä [REACT TEST] Verificando fluxo de dados...');
  
  // Verificar se h√° atividades carregadas
  const activities = window.activities || [];
  console.log(`üìã [REACT TEST] Atividades carregadas: ${activities.length}`);
  
  if (activities.length > 0) {
    console.log('üìã [REACT TEST] Primeira atividade:', activities[0]);
  }
  
  // Verificar se h√° colunas do Kanban
  const kanbanColumns = window.kanbanColumns || [];
  console.log(`üìã [REACT TEST] Colunas do Kanban: ${kanbanColumns.length}`);
  
  if (kanbanColumns.length > 0) {
    console.log('üìã [REACT TEST] Colunas:', kanbanColumns);
  }
  
  return {
    activities: activities.length,
    kanbanColumns: kanbanColumns.length
  };
}

// Fun√ß√£o para simular drag and drop real
function simulateRealDragAndDrop() {
  console.log('üéÆ [REACT TEST] Simulando drag and drop real...');
  
  const kanbanContainer = document.querySelector('.flex.gap-6') || 
                         document.querySelector('[class*="ClickUpKanban"]');
  
  if (!kanbanContainer) {
    console.error('‚ùå [REACT TEST] Container n√£o encontrado para simula√ß√£o');
    return;
  }
  
  const taskCards = kanbanContainer.querySelectorAll('[draggable="true"]');
  const columns = kanbanContainer.querySelectorAll('[style*="width: 280px"]');
  
  if (taskCards.length === 0) {
    console.warn('‚ö†Ô∏è [REACT TEST] Nenhum card encontrado para testar');
    return;
  }
  
  if (columns.length < 2) {
    console.warn('‚ö†Ô∏è [REACT TEST] Precisa de pelo menos 2 colunas');
    return;
  }
  
  const sourceCard = taskCards[0];
  const targetColumn = columns[1];
  
  console.log('üéØ [REACT TEST] Testando drag do card:', sourceCard);
  console.log('üéØ [REACT TEST] Para coluna:', targetColumn);
  
  // Verificar se o card tem os atributos corretos
  const taskId = sourceCard.getAttribute('data-task-id') || 
                 sourceCard.querySelector('[data-task-id]')?.getAttribute('data-task-id');
  const taskTitle = sourceCard.textContent?.trim();
  
  console.log('üîç [REACT TEST] Dados do card:', { taskId, taskTitle });
  
  // Simular eventos de drag
  const dragStartEvent = new DragEvent('dragstart', {
    bubbles: true,
    cancelable: true,
    dataTransfer: new DataTransfer()
  });
  
  const dragOverEvent = new DragEvent('dragover', {
    bubbles: true,
    cancelable: true,
    dataTransfer: new DataTransfer()
  });
  
  const dropEvent = new DragEvent('drop', {
    bubbles: true,
    cancelable: true,
    dataTransfer: new DataTransfer()
  });
  
  // Configurar dataTransfer
  const dragData = {
    task: {
      id: taskId || 'test-task-id',
      title: taskTitle || 'Test Task',
      status: 'pending'
    },
    sourceColumnId: 'todo'
  };
  
  dropEvent.dataTransfer.setData('text/plain', JSON.stringify(dragData));
  
  // Disparar eventos
  console.log('üöÄ [REACT TEST] Disparando dragstart...');
  sourceCard.dispatchEvent(dragStartEvent);
  
  console.log('üéØ [REACT TEST] Disparando dragover...');
  targetColumn.dispatchEvent(dragOverEvent);
  
  console.log('üèÅ [REACT TEST] Disparando drop...');
  targetColumn.dispatchEvent(dropEvent);
  
  console.log('‚úÖ [REACT TEST] Simula√ß√£o conclu√≠da');
}

// Fun√ß√£o para verificar logs do React
function checkReactLogs() {
  console.log('üìä [REACT TEST] Verificando logs do React...');
  
  // Interceptar console.log para capturar logs de drag and drop
  const originalLog = console.log;
  const dragLogs = [];
  
  console.log = function(...args) {
    const message = args.join(' ');
    if (message.includes('[DRAG]') || message.includes('[DROP]') || message.includes('[KANBAN]')) {
      dragLogs.push(message);
    }
    originalLog.apply(console, args);
  };
  
  // Restaurar console.log ap√≥s 10 segundos
  setTimeout(() => {
    console.log = originalLog;
    console.log('üìã [REACT TEST] Logs capturados:', dragLogs);
    
    if (dragLogs.length === 0) {
      console.warn('‚ö†Ô∏è [REACT TEST] Nenhum log de drag and drop encontrado - poss√≠vel problema na implementa√ß√£o');
    }
  }, 10000);
}

// Fun√ß√£o para verificar se h√° erros no React
function checkReactErrors() {
  console.log('üîç [REACT TEST] Verificando erros do React...');
  
  // Verificar se h√° erros no console
  const originalError = console.error;
  const errors = [];
  
  console.error = function(...args) {
    errors.push(args.join(' '));
    originalError.apply(console, args);
  };
  
  // Restaurar console.error ap√≥s 5 segundos
  setTimeout(() => {
    console.error = originalError;
    if (errors.length > 0) {
      console.log('‚ùå [REACT TEST] Erros encontrados:', errors);
    } else {
      console.log('‚úÖ [REACT TEST] Nenhum erro encontrado');
    }
  }, 5000);
}

// Fun√ß√£o principal de teste
function runReactDragDropTest() {
  console.log('üß™ [REACT TEST] ===== INICIANDO TESTE COMPLETO =====');
  
  // 1. Verificar renderiza√ß√£o
  const rendering = checkReactRendering();
  if (!rendering) {
    console.error('‚ùå [REACT TEST] Teste falhou: renderiza√ß√£o incorreta');
    return;
  }
  
  // 2. Verificar fluxo de dados
  const dataFlow = checkDataFlow();
  console.log('üìä [REACT TEST] Fluxo de dados:', dataFlow);
  
  // 3. Verificar logs
  checkReactLogs();
  
  // 4. Verificar erros
  checkReactErrors();
  
  // 5. Simular drag and drop
  setTimeout(() => {
    simulateRealDragAndDrop();
  }, 2000);
  
  console.log('‚úÖ [REACT TEST] Teste iniciado - aguarde os resultados...');
}

// Exportar fun√ß√µes
window.reactDragDropTest = {
  checkReactRendering,
  checkDataFlow,
  simulateRealDragAndDrop,
  checkReactLogs,
  checkReactErrors,
  runReactDragDropTest
};

// Executar teste automaticamente
runReactDragDropTest();
