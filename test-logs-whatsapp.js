// test-logs-whatsapp.js
// Script para testar os logs do sistema WhatsApp

const { createClient } = require('@supabase/supabase-js');

// Configura√ß√£o do Supabase
const supabaseUrl = 'https://nrbsocawokmihvxfcpso.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5yYnNvY2F3b2ttaWh2eGZjcHNvIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NjQ3NDA1MywiZXhwIjoyMDcyMDUwMDUzfQ.w6EJDzQj1fffHJ4lYzOVDLydqhbhGOW5KtGBDjaHfPA';

const supabase = createClient(supabaseUrl, supabaseKey);

async function testLogs() {
  console.log('üß™ [TEST-LOGS] Iniciando teste de logs do sistema WhatsApp...');
  
  try {
    // 1. Verificar se o backend est√° rodando
    console.log('üîç [TEST-LOGS] Verificando se o backend est√° rodando...');
    
    try {
      const response = await fetch('http://localhost:3000/api/baileys-simple/health');
      const health = await response.json();
      console.log('‚úÖ [TEST-LOGS] Backend est√° rodando:', health);
    } catch (error) {
      console.log('‚ùå [TEST-LOGS] Backend n√£o est√° rodando:', error.message);
      console.log('üí° [TEST-LOGS] Execute: cd backend && node simple-baileys-server.js');
      return;
    }
    
    // 2. Verificar conex√µes ativas
    console.log('üîç [TEST-LOGS] Verificando conex√µes ativas...');
    
    try {
      const response = await fetch('http://localhost:3000/api/baileys-simple/connections');
      const connections = await response.json();
      console.log('üìä [TEST-LOGS] Conex√µes encontradas:', connections.data?.length || 0);
      
      if (connections.data && connections.data.length > 0) {
        connections.data.forEach((conn, index) => {
          console.log(`   ${index + 1}. ${conn.name} - ${conn.status}`);
        });
      } else {
        console.log('‚ö†Ô∏è [TEST-LOGS] Nenhuma conex√£o ativa encontrada');
        console.log('üí° [TEST-LOGS] Crie uma conex√£o WhatsApp primeiro');
        return;
      }
    } catch (error) {
      console.log('‚ùå [TEST-LOGS] Erro ao verificar conex√µes:', error.message);
      return;
    }
    
    // 3. Verificar mensagens recentes no banco
    console.log('üîç [TEST-LOGS] Verificando mensagens recentes no banco...');
    
    const { data: recentMessages, error: messagesError } = await supabase
      .from('whatsapp_mensagens')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(5);
    
    if (messagesError) {
      console.log('‚ùå [TEST-LOGS] Erro ao buscar mensagens:', messagesError);
    } else {
      console.log('üìä [TEST-LOGS] Mensagens recentes encontradas:', recentMessages.length);
      recentMessages.forEach((msg, index) => {
        console.log(`   ${index + 1}. ${msg.wpp_name || 'Sem nome'} - ${msg.conteudo?.substring(0, 30)}...`);
        console.log(`      Tipo: ${msg.message_type || msg.tipo} | Grupo: ${msg.whatsapp_is_group ? 'Sim' : 'N√£o'}`);
        if (msg.whatsapp_business_name) {
          console.log(`      Neg√≥cio: ${msg.whatsapp_business_name}`);
        }
        if (msg.whatsapp_group_subject) {
          console.log(`      Grupo: ${msg.whatsapp_group_subject}`);
        }
      });
    }
    
    // 4. Verificar contatos com informa√ß√µes de perfil
    console.log('üîç [TEST-LOGS] Verificando contatos com informa√ß√µes de perfil...');
    
    const { data: contacts, error: contactsError } = await supabase
      .from('contacts')
      .select('*')
      .not('whatsapp_jid', 'is', null)
      .limit(5);
    
    if (contactsError) {
      console.log('‚ùå [TEST-LOGS] Erro ao buscar contatos:', contactsError);
    } else {
      console.log('üìä [TEST-LOGS] Contatos com WhatsApp encontrados:', contacts.length);
      contacts.forEach((contact, index) => {
        console.log(`   ${index + 1}. ${contact.name} (${contact.whatsapp_name})`);
        console.log(`      Phone: ${contact.phone} | JID: ${contact.whatsapp_jid}`);
        console.log(`      Grupo: ${contact.whatsapp_is_group ? 'Sim' : 'N√£o'} | Neg√≥cio: ${contact.whatsapp_business_name || 'N√£o'}`);
        if (contact.whatsapp_business_name) {
          console.log(`      Neg√≥cio: ${contact.whatsapp_business_name} (${contact.whatsapp_business_category})`);
        }
        if (contact.whatsapp_group_subject) {
          console.log(`      Grupo: ${contact.whatsapp_group_subject}`);
        }
      });
    }
    
    // 5. Instru√ß√µes para monitorar logs
    console.log('\nüìã [TEST-LOGS] ===== INSTRU√á√ïES PARA MONITORAR LOGS =====');
    console.log('1. Para ver logs em tempo real, execute:');
    console.log('   cd backend && node simple-baileys-server.js');
    console.log('');
    console.log('2. Para testar sincroniza√ß√£o de perfis:');
    console.log('   curl -X POST http://localhost:3001/api/whatsapp-profile/SUA_CONEXAO/sync-all \\');
    console.log('     -H "Content-Type: application/json" \\');
    console.log('     -d \'{"userId": "SEU_USER_ID"}\'');
    console.log('');
    console.log('3. Para verificar status da sincroniza√ß√£o:');
    console.log('   curl http://localhost:3001/api/whatsapp-profile/SUA_CONEXAO/sync-status');
    console.log('');
    console.log('4. Para listar grupos:');
    console.log('   curl http://localhost:3001/api/whatsapp-profile/SUA_CONEXAO/groups');
    console.log('');
    console.log('5. Logs importantes a observar:');
    console.log('   - [CONTACT-EXTRACTOR] - Extra√ß√£o de informa√ß√µes de contato');
    console.log('   - [BUSINESS-INFO] - Informa√ß√µes de neg√≥cio');
    console.log('   - [GROUP-INFO] - Informa√ß√µes de grupos');
    console.log('   - [DATABASE] - Salvamento no banco de dados');
    console.log('   - [PROFILE-SYNC] - Sincroniza√ß√£o de perfis');
    
    console.log('\n‚úÖ [TEST-LOGS] Teste de logs conclu√≠do!');
    
  } catch (error) {
    console.error('‚ùå [TEST-LOGS] Erro no teste:', error);
  }
}

// Executar teste
testLogs();
