// Script de teste para verificar se o erro do AuthProvider foi corrigido
// Execute este script no console do navegador

console.log('üîß Testando corre√ß√£o do erro AuthProvider...');

// Fun√ß√£o para verificar se os contextos est√£o funcionando
function testContextProviders() {
  console.log('üìä Verificando contextos:');
  
  try {
    // Verificar se o React est√° carregado
    if (typeof React !== 'undefined') {
      console.log('‚úÖ React carregado');
    } else {
      console.log('‚ùå React n√£o encontrado');
    }
    
    // Verificar se h√° erros no console
    const originalError = console.error;
    const errors = [];
    
    console.error = function(...args) {
      errors.push(args.join(' '));
      originalError.apply(console, args);
    };
    
    // Aguardar um pouco para capturar erros
    setTimeout(() => {
      console.error = originalError;
      
      if (errors.length === 0) {
        console.log('‚úÖ Nenhum erro de contexto detectado');
      } else {
        console.log('‚ùå Erros detectados:', errors);
      }
    }, 2000);
    
  } catch (error) {
    console.error('‚ùå Erro ao testar contextos:', error);
  }
}

// Fun√ß√£o para verificar se o tema est√° carregando
function testThemeLoading() {
  console.log('üé® Testando carregamento do tema...');
  
  const root = document.documentElement;
  const computedStyle = getComputedStyle(root);
  
  const sidebarColor = computedStyle.getPropertyValue('--sidebar-color');
  const topbarColor = computedStyle.getPropertyValue('--topbar-color');
  const buttonColor = computedStyle.getPropertyValue('--button-color');
  
  console.log('Cores atuais:');
  console.log('- Sidebar:', sidebarColor);
  console.log('- Topbar:', topbarColor);
  console.log('- Button:', buttonColor);
  
  if (sidebarColor && topbarColor && buttonColor) {
    console.log('‚úÖ Vari√°veis CSS do tema carregadas');
  } else {
    console.log('‚ùå Vari√°veis CSS do tema n√£o encontradas');
  }
}

// Fun√ß√£o para verificar se os componentes est√£o renderizando
function testComponentRendering() {
  console.log('üß© Testando renderiza√ß√£o dos componentes...');
  
  const sidebar = document.querySelector('[class*="fixed left-0 top-[46px]"]');
  const topbar = document.querySelector('header[class*="fixed top-0"]');
  const buttons = document.querySelectorAll('button[class*="px-4 py-2"]');
  
  console.log('Componentes encontrados:');
  console.log('- Sidebar:', sidebar ? '‚úÖ' : '‚ùå');
  console.log('- Topbar:', topbar ? '‚úÖ' : '‚ùå');
  console.log('- Bot√µes:', buttons.length > 0 ? `‚úÖ (${buttons.length})` : '‚ùå');
  
  if (sidebar && topbar && buttons.length > 0) {
    console.log('‚úÖ Todos os componentes principais renderizados');
  } else {
    console.log('‚ùå Alguns componentes n√£o foram encontrados');
  }
}

// Fun√ß√£o principal de teste
function runAuthProviderTests() {
  console.log('üöÄ Iniciando testes de corre√ß√£o do AuthProvider...');
  
  // Teste 1: Verificar contextos
  console.log('\n1Ô∏è‚É£ Testando contextos:');
  testContextProviders();
  
  // Teste 2: Verificar carregamento do tema
  console.log('\n2Ô∏è‚É£ Testando carregamento do tema:');
  testThemeLoading();
  
  // Teste 3: Verificar renderiza√ß√£o dos componentes
  console.log('\n3Ô∏è‚É£ Testando renderiza√ß√£o dos componentes:');
  testComponentRendering();
  
  console.log('\n‚úÖ Testes conclu√≠dos!');
  console.log('üí° Se n√£o houver erros de "useAuth must be used within an AuthProvider", a corre√ß√£o funcionou!');
}

// Executar testes
runAuthProviderTests();

// Exportar fun√ß√µes para uso manual
window.testAuthProvider = {
  testContextProviders,
  testThemeLoading,
  testComponentRendering,
  runAuthProviderTests
};

console.log('üîß Fun√ß√µes de teste dispon√≠veis em window.testAuthProvider');
